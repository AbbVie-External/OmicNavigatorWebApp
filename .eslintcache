[{"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\Enrichment.jsx":"1","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\index.js":"2","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\UrlControl.jsx":"3","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\Differential.jsx":"4","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionActive.jsx":"5","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionStill.jsx":"6","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\ButtonActions.jsx":"7","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\helpers.jsx":"8","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\services\\omicNavigator.service.js":"9","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcano.jsx":"10","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialSearchCriteria.jsx":"11","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\Templates.jsx":"12","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\SplitPanesContainer.jsx":"13","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\services\\pdf.service.js":"14","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\SVGPlot.jsx":"15","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialPlot.jsx":"16","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\SearchingAlt.jsx":"17","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentBreadcrumbs.jsx":"18","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\FilteredDifferentialTable.jsx":"19","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialBreadcrumbs.jsx":"20","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentResultsGraph.jsx":"21","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentMultisetFilters.jsx":"22","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\NetworkGraph.jsx":"23","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcanoPlot.jsx":"24","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\ViolinPlot.jsx":"25","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\App.jsx":"26"},{"size":70282,"mtime":1607723716889,"results":"27","hashOfConfig":"28"},{"size":526,"mtime":1607720750130,"results":"29","hashOfConfig":"28"},{"size":9471,"mtime":1607720750009,"results":"30","hashOfConfig":"28"},{"size":29744,"mtime":1608072791169,"results":"31","hashOfConfig":"28"},{"size":956,"mtime":1607720750101,"results":"32","hashOfConfig":"28"},{"size":1065,"mtime":1607720750111,"results":"33","hashOfConfig":"28"},{"size":8317,"mtime":1607726977459,"results":"34","hashOfConfig":"28"},{"size":9343,"mtime":1607720750018,"results":"35","hashOfConfig":"28"},{"size":29715,"mtime":1608094667070,"results":"36","hashOfConfig":"28"},{"size":30348,"mtime":1607713160381,"results":"37","hashOfConfig":"28"},{"size":37353,"mtime":1608100105671,"results":"38","hashOfConfig":"28"},{"size":265,"mtime":1607720750004,"results":"39","hashOfConfig":"28"},{"size":8893,"mtime":1607720749920,"results":"40","hashOfConfig":"28"},{"size":1082,"mtime":1607720750328,"results":"41","hashOfConfig":"28"},{"size":5072,"mtime":1607720749978,"results":"42","hashOfConfig":"28"},{"size":5159,"mtime":1607720749777,"results":"43","hashOfConfig":"28"},{"size":430,"mtime":1607720750087,"results":"44","hashOfConfig":"28"},{"size":3918,"mtime":1607720749864,"results":"45","hashOfConfig":"28"},{"size":17309,"mtime":1607720749894,"results":"46","hashOfConfig":"28"},{"size":2406,"mtime":1607720749763,"results":"47","hashOfConfig":"28"},{"size":35312,"mtime":1607726977455,"results":"48","hashOfConfig":"28"},{"size":31074,"mtime":1607720749871,"results":"49","hashOfConfig":"28"},{"size":45132,"mtime":1607720749904,"results":"50","hashOfConfig":"28"},{"size":20659,"mtime":1607713150747,"results":"51","hashOfConfig":"28"},{"size":56925,"mtime":1607720749930,"results":"52","hashOfConfig":"28"},{"size":192,"mtime":1607720749746,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1asxuey",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\Enrichment.jsx",[],["109","110"],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\index.js",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\UrlControl.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\Differential.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionActive.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionStill.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\ButtonActions.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\helpers.jsx",["111"],"import React from 'react';\r\nimport { Popup } from 'semantic-ui-react';\r\nimport _ from 'lodash';\r\n// import phosphosite_icon from '../../resources/phosphosite.ico';\r\n// import reactome_icon from '../../resources/reactome.jpg';\r\n// import go_icon from '../../resources/go.png';\r\n// import msig_icon from '../../resources/msig.ico';\r\nimport * as d3 from 'd3-array';\r\n// import { omicNavigatorService } from '../../services/omicNavigator.service';\r\n\r\nexport function getLinkout(\r\n  // icons,\r\n  // iconDomains,\r\n  // TableValuePopupStyle,\r\n  // linkoutsConcatenated,\r\n  itemValue,\r\n  linkouts,\r\n  TableValuePopupStyle,\r\n) {\r\n  // itemValue = 'ENSP00000489236.1;ENSP00000484789.1;ENSP00000481486.1;ENSP00000480960.1;ENSP00000479794.1;ENSP00000479461.1';\r\n  function openWindows(link, itemValue) {\r\n    const windowFeatures =\r\n      'menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes';\r\n    const itemValuesSeparated = separateItemValues(itemValue);\r\n    let linkoutsConcatenated = [];\r\n    if (itemValuesSeparated.length === 1) {\r\n      linkoutsConcatenated = `${link}${itemValuesSeparated[0]}`;\r\n      window.open(linkoutsConcatenated, '_blank', windowFeatures);\r\n    }\r\n    if (itemValuesSeparated.length > 1) {\r\n      for (const item of itemValuesSeparated) {\r\n        linkoutsConcatenated.push(`${link}${item}`);\r\n      }\r\n      linkoutsConcatenated.forEach(link => {\r\n        window.open(link, '_blank', windowFeatures);\r\n      });\r\n    }\r\n  }\r\n\r\n  const iconBaseUrl = 'https://icons.duckduckgo.com/ip3/';\r\n  let iconDomains = [];\r\n  let icons = [];\r\n\r\n  if (linkouts.length > 1) {\r\n    for (const val of linkouts) {\r\n      const domainRaw = findDomain(`${val}`);\r\n      const domainRawWww = domainRaw.includes('www')\r\n        ? domainRaw\r\n        : `www.${domainRaw}`;\r\n      const domainRawWwwHttps = domainRawWww.includes('//')\r\n        ? domainRawWww.split('//').pop()\r\n        : domainRawWww;\r\n      iconDomains.push(domainRawWwwHttps);\r\n      icons.push(`${iconBaseUrl}${domainRawWwwHttps}.ico`);\r\n    }\r\n\r\n    const Popups = linkouts.map((link, index) => {\r\n      return (\r\n        <Popup\r\n          key={itemValue - index}\r\n          trigger={\r\n            <img\r\n              src={icons[index]}\r\n              alt={iconDomains[index]}\r\n              className=\"ExternalSiteIcon\"\r\n              onClick={() => openWindows(link, itemValue)}\r\n            />\r\n          }\r\n          style={TableValuePopupStyle}\r\n          className=\"TablePopupValue\"\r\n          content={iconDomains[index]}\r\n          inverted\r\n          basic\r\n        />\r\n      );\r\n    });\r\n    return Popups;\r\n  } else {\r\n    const linkoutsIsArray = Array.isArray(linkouts);\r\n    const domainRaw = linkoutsIsArray\r\n      ? findDomain(`${linkouts[0]}`)\r\n      : findDomain(linkouts);\r\n    const domainRawWww = domainRaw.includes('www')\r\n      ? domainRaw\r\n      : `www.${domainRaw}`;\r\n    const domainRawWwwHttps = domainRawWww.includes('//')\r\n      ? domainRawWww.split('//').pop()\r\n      : domainRawWww;\r\n    iconDomains.push(domainRawWwwHttps);\r\n    icons.push(`${iconBaseUrl}${domainRawWwwHttps}.ico`);\r\n    return (\r\n      <Popup\r\n        key={itemValue}\r\n        trigger={\r\n          <img\r\n            src={icons[0]}\r\n            alt={iconDomains}\r\n            className=\"ExternalSiteIcon\"\r\n            onClick={() => openWindows(linkouts, itemValue)}\r\n          />\r\n        }\r\n        style={TableValuePopupStyle}\r\n        className=\"TablePopupValue\"\r\n        content={iconDomains}\r\n        inverted\r\n        basic\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport function separateItemValues(value) {\r\n  if (value) {\r\n    const splitValuesArr = value.split(';');\r\n    // const arrayOfValues =\r\n    return splitValuesArr;\r\n  }\r\n}\r\n\r\nexport function formatNumberForDisplay(num) {\r\n  if (!isNaN(num)) {\r\n    const number = Math.abs(num);\r\n    if (number === 0) {\r\n      return num;\r\n    } else if (number < 0.001 || number >= 1000) {\r\n      return num.toExponential(2);\r\n      // * If a number is < .001 report this value scientific notation with three significant digits\r\n      // * If a number is >= 1000, switch to scientific notation with three sig digits.\r\n\r\n      // } else if (number < 1 && number >= 0.001) {\r\n      //   return num.toPrecision(3);\r\n      // * If a number is < 1 & >= .001, report this value with three decimal places\r\n      // PN - what's left is >=1 and <1000, guess that goes to 3 digits too\r\n    } else {\r\n      return num.toPrecision(3);\r\n    }\r\n  } else return null;\r\n}\r\n\r\nexport function splitValue(value) {\r\n  if (value) {\r\n    const firstValue = value.split(';')[0];\r\n    const numberOfSemicolons = (value.match(/;/g) || []).length;\r\n    return numberOfSemicolons > 0\r\n      ? `${firstValue}...(${numberOfSemicolons})`\r\n      : firstValue;\r\n  }\r\n}\r\n\r\nexport function findDomain(link) {\r\n  if (link) {\r\n    const path = link.split('//')[1] || null;\r\n    return path != null ? path.split('/')[0] : null;\r\n  }\r\n}\r\n\r\nexport function limitValues(values, size) {\r\n  if (values) {\r\n    let commaSeparatedValues = values.join(', ');\r\n    if (values.length <= size) {\r\n      return commaSeparatedValues;\r\n    } else {\r\n      const numberOfCommas = (commaSeparatedValues.match(/,/g) || []).length;\r\n      const splitValues = commaSeparatedValues.split(',');\r\n      const slicedValues = splitValues.slice(0, size);\r\n      return `${slicedValues}...(${numberOfCommas + 1 - size} more)`;\r\n    }\r\n  }\r\n}\r\n\r\nexport function limitString(string, indexes, characters) {\r\n  if (indexes < 3) {\r\n    return string;\r\n  } else {\r\n    let stringSubstring = string?.substring(0, characters);\r\n    return `${stringSubstring}...`;\r\n  }\r\n}\r\n\r\nexport function scrollElement(_this, grid, target) {\r\n  const bodyRef =\r\n    _this[grid].current?.qhGridRef?.current?.bodyRef?.current || null;\r\n  window.requestAnimationFrame(function() {\r\n    if (bodyRef != null) {\r\n      const row = bodyRef.getElementsByClassName(target);\r\n      if (row.length !== 0) {\r\n        bodyRef.scrollTo({\r\n          top: row[0].offsetTop - 40,\r\n          left: 0,\r\n          behavior: 'smooth',\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport function networkByCluster(network) {\r\n  network = _.cloneDeep(network);\r\n  let buckets = [];\r\n  let inBucket = false;\r\n  const bucket = () => {\r\n    let keepGoing = true;\r\n    let nodeArray = [];\r\n    let nowInBucket = false;\r\n\r\n    while (keepGoing) {\r\n      keepGoing = false;\r\n      _.forEach(network.links, link => {\r\n        nowInBucket = false;\r\n        _.forEach(buckets, bucket => {\r\n          if (\r\n            _.includes(bucket, link.source) ||\r\n            _.includes(bucket, link.target)\r\n          ) {\r\n            nowInBucket = true;\r\n          }\r\n        });\r\n        if (!nowInBucket) {\r\n          if (\r\n            !_.includes(nodeArray, link.source) &&\r\n            !_.includes(nodeArray, link.target) &&\r\n            nodeArray.length === 0\r\n          ) {\r\n            nodeArray.push(link.source);\r\n            nodeArray.push(link.target);\r\n            keepGoing = true;\r\n          }\r\n          if (\r\n            _.includes(nodeArray, link.source) &&\r\n            !_.includes(nodeArray, link.target)\r\n          ) {\r\n            nodeArray.push(link.target);\r\n            keepGoing = true;\r\n          }\r\n          if (\r\n            _.includes(nodeArray, link.target) &&\r\n            !_.includes(nodeArray, link.source)\r\n          ) {\r\n            nodeArray.push(link.source);\r\n            keepGoing = true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return nodeArray;\r\n  };\r\n  _.forEach(network.links, link => {\r\n    inBucket = false;\r\n    _.forEach(buckets, bucket => {\r\n      if (_.includes(bucket, link.source) || _.includes(bucket, link.target)) {\r\n        inBucket = true;\r\n      }\r\n    });\r\n    //found a link that isn't accounted for, so run through the bucketing process\r\n    if (!inBucket) {\r\n      buckets.push(bucket());\r\n    }\r\n  });\r\n  let nextIndex = 1;\r\n  _.forEach(network.nodes, node => {\r\n    let found = false;\r\n    _.forEach(buckets, (bucket, i) => {\r\n      if (_.includes(bucket, node.id)) {\r\n        node.group = i;\r\n        found = true;\r\n      }\r\n    });\r\n    if (!found) {\r\n      node.group = buckets.length + nextIndex;\r\n      nextIndex++;\r\n    }\r\n  });\r\n  _.forEach(network.links, link => {\r\n    _.forEach(buckets, (bucket, i) => {\r\n      if (_.includes(bucket, link.target || _.includes(bucket, link.source))) {\r\n        link.group = i;\r\n      }\r\n    });\r\n  });\r\n  network.nodes = _.sortBy(network.nodes, [\r\n    function(o) {\r\n      return o.group;\r\n    },\r\n  ]);\r\n  network.links = _.sortBy(network.links, [\r\n    function(o) {\r\n      return o.group;\r\n    },\r\n  ]);\r\n  let nodes = d3.group(network.nodes, d => d.group);\r\n  let links = d3.group(network.links, d => d.group);\r\n  let nodeArray = Array.from(nodes, function(o) {\r\n    return { name: 'cluster' + o[0], size: o[1].length, nodes: o[1] };\r\n  });\r\n  let linkArray = Array.from(links, function(o) {\r\n    return { name: 'cluster' + o[0], size_links: o[1].length, links: o[1] };\r\n  });\r\n  _.forEach(nodeArray, nObj => {\r\n    let links = _.find(linkArray, function(lObj) {\r\n      return lObj.name === nObj.name;\r\n    });\r\n    if (links) {\r\n      nObj.links = links.links;\r\n    } else {\r\n      nObj.links = [];\r\n    }\r\n  });\r\n  nodeArray.sort((x, y) => d3.descending(x.size, y.size));\r\n  return { name: 'Network', children: nodeArray };\r\n}\r\n","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\services\\omicNavigator.service.js",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcano.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialSearchCriteria.jsx",["112"],"import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  Form,\r\n  Select,\r\n  Icon,\r\n  Popup,\r\n  Divider,\r\n  Radio,\r\n  Transition,\r\n} from 'semantic-ui-react';\r\nimport { CancelToken } from 'axios';\r\nimport DOMPurify from 'dompurify';\r\nimport '../Shared/SearchCriteria.scss';\r\nimport { omicNavigatorService } from '../../services/omicNavigator.service';\r\nimport DifferentialMultisetFilters from './DifferentialMultisetFilters';\r\n\r\nlet cancelRequestGetReportLinkDifferential = () => {};\r\nlet cancelRequestPSCGetResultsTable = () => {};\r\nlet cancelRequestMultisetInferenceData = () => {};\r\nlet cancelRequestInferenceMultisetPlot = () => {};\r\nclass DifferentialSearchCriteria extends Component {\r\n  state = {\r\n    differentialStudies: [],\r\n    differentialStudyHrefVisible: false,\r\n    differentialStudyHref: '',\r\n    differentialStudyReportTooltip:\r\n      'Select a study and model to view Analysis Details',\r\n    differentialModels: [],\r\n    differentialTests: [],\r\n    differentialModelTooltip: '',\r\n    differentialTestTooltip: '',\r\n    differentialStudiesDisabled: true,\r\n    differentialModelsDisabled: true,\r\n    differentialTestsDisabled: true,\r\n    uAnchorP: '',\r\n    selectedColP: [],\r\n    selectedOperatorP: [\r\n      {\r\n        key: '<',\r\n        text: '<',\r\n        value: '<',\r\n      },\r\n    ],\r\n    sigValueP: [0.05],\r\n    reloadPlotP: true,\r\n    uSettingsP: {\r\n      defaultselectedColP: [],\r\n      defaultselectedOperatorP: {\r\n        key: '<',\r\n        text: '<',\r\n        value: '<',\r\n      },\r\n      defaultSigValueP: [0.05],\r\n      useAnchorP: true,\r\n      hoveredFilter: -1,\r\n      mustP: [],\r\n      notP: [],\r\n      displayMetaDataP: true,\r\n      templateName: 'differential-multiset',\r\n      numElementsP: 0,\r\n      maxElementsP: 0,\r\n      indexFiltersP: [0],\r\n      metaSvgP: '',\r\n      heightScalarP: 1,\r\n      thresholdOperatorP: [\r\n        {\r\n          key: '<',\r\n          text: '<',\r\n          value: '<',\r\n        },\r\n        {\r\n          key: '>',\r\n          text: '>',\r\n          value: '>',\r\n        },\r\n        {\r\n          key: '|<|',\r\n          text: '|<|',\r\n          value: '|<|',\r\n        },\r\n        {\r\n          key: '|>|',\r\n          text: '|>|',\r\n          value: '|>|',\r\n        },\r\n      ],\r\n    },\r\n    multisetFiltersVisibleDifferential: false,\r\n    activateMultisetFiltersP: false,\r\n    uDataP: [],\r\n    initialRenderP: true,\r\n    // loadingDifferentialMultisetFilters: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      differentialStudiesDisabled: false,\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.allStudiesMetadata !== prevProps.allStudiesMetadata ||\r\n      this.props.differentialStudy !== prevProps.differentialStudy\r\n    ) {\r\n      this.populateDropdowns();\r\n    }\r\n    // if (this.props.multisetPlotAvailableDifferential !== prevProps.multisetPlotAvailableDifferential) {\r\n    //   this.forceUpdate();\r\n    // }\r\n  }\r\n\r\n  populateDropdowns = () => {\r\n    const {\r\n      allStudiesMetadata,\r\n      differentialStudy,\r\n      differentialModel,\r\n      differentialTest,\r\n      differentialFeature,\r\n      onSearchCriteriaChangeDifferential,\r\n      onSearchTransitionDifferential,\r\n    } = this.props;\r\n    const studies = allStudiesMetadata.map(study => {\r\n      const studyName = study.name;\r\n      return {\r\n        key: `${studyName}Differential`,\r\n        text: studyName,\r\n        value: studyName,\r\n      };\r\n    });\r\n    this.setState({\r\n      differentialStudies: studies,\r\n    });\r\n    if (differentialStudy !== '') {\r\n      // loop through allStudiesMetadata to find the object with the name matching differentialStudy\r\n      const allStudiesMetadataCopy = [...allStudiesMetadata];\r\n      const differentialStudyData = allStudiesMetadataCopy.find(\r\n        study => study.name === differentialStudy,\r\n      );\r\n      const differentialModelsAndTestsVar =\r\n        differentialStudyData?.results || [];\r\n      this.props.onSetStudyModelTestMetadata(\r\n        differentialStudyData,\r\n        differentialModelsAndTestsVar,\r\n      );\r\n      const differentialModelsMapped = differentialModelsAndTestsVar.map(\r\n        result => {\r\n          return {\r\n            key: `${result.modelID}Differential`,\r\n            text: result.modelID,\r\n            value: result.modelID,\r\n          };\r\n        },\r\n      );\r\n\r\n      this.setState({\r\n        differentialModelsDisabled: false,\r\n        differentialModels: differentialModelsMapped,\r\n      });\r\n      this.getReportLink(differentialStudy, 'default');\r\n      if (differentialModel !== '') {\r\n        this.props.onDoMetaFeaturesExist(differentialStudy, differentialModel);\r\n        this.props.onGetResultsLinkouts(differentialStudy, differentialModel);\r\n        this.props.onHandlePlotTypesDifferential(differentialModel);\r\n        const differentialModelWithTests = differentialModelsAndTestsVar.find(\r\n          model => model.modelID === differentialModel,\r\n        );\r\n        const differentialModelTooltip =\r\n          differentialModelWithTests?.modelDisplay || '';\r\n        this.setState({\r\n          differentialModelTooltip: differentialModelTooltip,\r\n        });\r\n        const differentialTestsMetadataVar =\r\n          differentialModelWithTests?.tests || [];\r\n        const differentialTestsMapped = differentialTestsMetadataVar.map(\r\n          test => {\r\n            return {\r\n              key: `${test.testID}Differential`,\r\n              text: test.testID,\r\n              value: test.testID,\r\n            };\r\n          },\r\n        );\r\n        const uDataPMapped = differentialTestsMetadataVar.map(t => t.testID);\r\n        this.setState({\r\n          differentialTestsDisabled: false,\r\n          differentialTests: differentialTestsMapped,\r\n          uDataP: uDataPMapped,\r\n        });\r\n        this.props.onSetTestsMetadata(differentialTestsMetadataVar);\r\n        this.getReportLink(differentialStudy, differentialModel);\r\n        if (differentialTest !== '') {\r\n          onSearchTransitionDifferential(true);\r\n          // omicNavigatorService\r\n          //   .getResultsTable(\r\n          //     differentialStudy,\r\n          //     differentialModel,\r\n          //     differentialTest,\r\n          //     onSearchTransitionDifferential,\r\n          //   )\r\n          //   .then(getResultsTableData => {\r\n          //     // debugger;\r\n          //     // getResultsTableData = getResultsTableData.json();\r\n          //     if (getResultsTableData != null) {\r\n          //       if (getResultsTableData.length > 0) {\r\n          //         this.handleGetResultsTableData(\r\n          //           getResultsTableData,\r\n          //           true,\r\n          //           true,\r\n          //           differentialTest,\r\n          //         );\r\n          //       }\r\n          //     }\r\n          //   })\r\n          //   .catch(error => {\r\n          //     console.error('Error during getResultsTable', error);\r\n          //   });\r\n\r\n          const self = this;\r\n          const obj = {\r\n            study: differentialStudy,\r\n            modelID: differentialModel,\r\n            testID: differentialTest,\r\n          };\r\n          const fetchUrl = `***REMOVED***/ocpu/library/OmicNavigator/R/getResultsTable/json?auto_unbox=true`;\r\n          const fetchResponse = fetch(fetchUrl, {\r\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n            // mode: 'cors', // no-cors, *cors, same-origin\r\n            // cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            // credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            // redirect: 'follow', // manual, *follow, error\r\n            // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n            body: JSON.stringify(obj), // body data type must match \"Content-Type\" header\r\n          })\r\n            // .then(response => response.json())\r\n            //   .then(response => response.text())\r\n            //   .then(transform);\r\n\r\n            // function transform(str) {\r\n            //   debugger;\r\n            //   let data = str.split('\\n').map(i => i.split(','));\r\n            //   let headers = data.shift();\r\n            //   let output = data.map(d => {\r\n            //     let obj = {};\r\n            //     headers.map((h, i) => (obj[headers[i]] = d[i]));\r\n            //     return obj;\r\n            //   });\r\n            //   console.log(output);\r\n            //   JSON.stringify(output)\r\n            // }\r\n            // .then(response => response.json())\r\n            // .then(responseJSON => {\r\n            //   if (responseJSON != null) {\r\n            //     if (responseJSON.length > 0) {\r\n            //       self.handleGetResultsTableData(\r\n            //         responseJSON,\r\n            //         true,\r\n            //         true,\r\n            //         differentialTest,\r\n            //       );\r\n            //     }\r\n            //   }\r\n            // });\r\n            .then(response => {\r\n              const reader = response.body.getReader();\r\n              let streamedResults = [];\r\n              return new ReadableStream({\r\n                start(controller) {\r\n                  return pump();\r\n                  function pump() {\r\n                    return reader.read().then(({ done, value }) => {\r\n                      // When no more data needs to be consumed, close the stream\r\n                      if (done) {\r\n                        controller.close();\r\n                        return;\r\n                      }\r\n                      // Enqueue the next data chunk into our target stream\r\n                      controller.enqueue(value);\r\n                      streamedResults.push(value);\r\n                      // console.log(value);\r\n                      console.log(streamedResults);\r\n                      // console.log(\r\n                      //   JSON.parse(\r\n                      //     String.fromCharCode.apply(\r\n                      //       null,\r\n                      //       new Uint8Array(value),\r\n                      //     ),\r\n                      //   ),\r\n                      // );\r\n                      // JSON.stringify(Array.from(new Uint8Array(value)));\r\n                      // function Decodeuint8arr(uint8array) {\r\n                      //   return new TextDecoder('utf-8').decode(uint8array);\r\n                      // }\r\n                      // const streamedResultsDecoded = Decodeuint8arr(\r\n                      //   streamedResults,\r\n                      // );\r\n                      // self.handleGetResultsTableData(\r\n                      //   streamedResultsDecoded,\r\n                      //   true,\r\n                      //   true,\r\n                      //   differentialTest,\r\n                      // );\r\n                      // ReadableStream.pipeTo(\r\n                      //   new WritableStream({\r\n                      //     write(streamedResults) {\r\n                      //       self.handleGetResultsTableData(\r\n                      //         streamedResults,\r\n                      //         true,\r\n                      //         true,\r\n                      //         differentialTest,\r\n                      //       );\r\n                      //       console.log('Chunk received', streamedResults);\r\n                      //     },\r\n                      //     close() {\r\n                      //       console.log('All data successfully read!');\r\n                      //     },\r\n                      //     abort(e) {\r\n                      //       console.error('Something went wrong!', e);\r\n                      //     },\r\n                      //   }),\r\n                      // );\r\n                      return pump();\r\n                    });\r\n                  }\r\n                },\r\n              });\r\n            })\r\n            // .then(stream => new Response(stream))\r\n            .then(stream => {\r\n              return new Response(stream);\r\n              // return new Response(stream, { headers: { \"Content-Type\": \"text/html\" } });\r\n            })\r\n            .then(streamResponse => streamResponse.json())\r\n            .then(streamJson => {\r\n              if (streamJson != null) {\r\n                if (streamJson.length > 0) {\r\n                  self.handleGetResultsTableData(\r\n                    streamJson,\r\n                    true,\r\n                    true,\r\n                    differentialTest,\r\n                  );\r\n                }\r\n              }\r\n            })\r\n            .catch(err => console.error(err));\r\n          onSearchCriteriaChangeDifferential(\r\n            {\r\n              differentialStudy: differentialStudy,\r\n              differentialModel: differentialModel,\r\n              differentialTest: differentialTest,\r\n              differentialFeature: differentialFeature,\r\n            },\r\n            false,\r\n          );\r\n          const differentialTestMeta = differentialTestsMetadataVar.find(\r\n            test => test.testID === differentialTest,\r\n          );\r\n          const differentialTestTooltip =\r\n            differentialTestMeta?.testDisplay || '';\r\n          this.setState({\r\n            differentialTestTooltip,\r\n            uAnchorP: differentialTest,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleStudyChange = (evt, { name, value }) => {\r\n    const {\r\n      onSearchCriteriaChangeDifferential,\r\n      onSearchCriteriaResetDifferential,\r\n    } = this.props;\r\n    onSearchCriteriaChangeDifferential(\r\n      {\r\n        [name]: value,\r\n        differentialModel: '',\r\n        differentialTest: '',\r\n      },\r\n      true,\r\n    );\r\n    onSearchCriteriaResetDifferential({\r\n      isValidSearchDifferential: false,\r\n    });\r\n    this.setState({\r\n      differentialStudyHrefVisible: false,\r\n      differentialModelsDisabled: true,\r\n      differentialTestsDisabled: true,\r\n      differentialModelTooltip: '',\r\n      differentialTestTooltip: '',\r\n    });\r\n    this.getReportLink(value, 'default');\r\n  };\r\n\r\n  setStudyTooltip = () => {\r\n    if (this.props.differentialModel !== '') {\r\n      this.setState({\r\n        differentialStudyReportTooltip: `The model \"main\" from the study ${this.props.differentialStudy} does not have additional analysis details available.`,\r\n      });\r\n    }\r\n  };\r\n\r\n  getReportLink = (study, model) => {\r\n    cancelRequestGetReportLinkDifferential();\r\n    let cancelToken = new CancelToken(e => {\r\n      cancelRequestGetReportLinkDifferential = e;\r\n    });\r\n    omicNavigatorService\r\n      .getReportLink(study, model, this.setStudyTooltip, cancelToken)\r\n      .then(getReportLinkResponse => {\r\n        if (getReportLinkResponse.length > 0) {\r\n          const link = getReportLinkResponse.includes('http')\r\n            ? getReportLinkResponse\r\n            : // : `***REMOVED***/ocpu/library/${getReportLinkResponse}`;\r\n              `${this.props.baseUrl}/ocpu/library/${getReportLinkResponse}`;\r\n          this.setState({\r\n            differentialStudyHrefVisible: true,\r\n            differentialStudyHref: link,\r\n          });\r\n        } else {\r\n          this.setStudyTooltip();\r\n          this.setState({\r\n            differentialStudyHrefVisible: false,\r\n            differentialStudyHref: '',\r\n          });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getReportLink', error);\r\n      });\r\n  };\r\n\r\n  handleModelChange = (evt, { name, value }) => {\r\n    const {\r\n      differentialStudy,\r\n      onSearchCriteriaChangeDifferential,\r\n      onSearchCriteriaResetDifferential,\r\n      differentialModelsAndTests,\r\n    } = this.props;\r\n    this.props.onHandlePlotTypesDifferential(value);\r\n    onSearchCriteriaChangeDifferential(\r\n      {\r\n        differentialStudy: differentialStudy,\r\n        [name]: value,\r\n        differentialTest: '',\r\n      },\r\n      true,\r\n    );\r\n    onSearchCriteriaResetDifferential({\r\n      isValidSearchDifferential: false,\r\n    });\r\n    const differentialModelsAndTestsCopy = [...differentialModelsAndTests];\r\n    const differentialModelWithTests = differentialModelsAndTestsCopy.find(\r\n      model => model.modelID === value,\r\n    );\r\n    const differentialModelTooltip =\r\n      differentialModelWithTests?.modelDisplay || '';\r\n    const differentialTestsMetadataVar =\r\n      differentialModelWithTests?.tests || [];\r\n    const differentialTestsMapped = differentialTestsMetadataVar.map(test => {\r\n      return {\r\n        key: test.testID,\r\n        text: test.testID,\r\n        value: test.testID,\r\n      };\r\n    });\r\n    const uDataP = differentialTestsMetadataVar.map(t => t.testID);\r\n    this.setState({\r\n      differentialTestsDisabled: false,\r\n      differentialTests: differentialTestsMapped,\r\n      uDataP: uDataP,\r\n      differentialModelTooltip: differentialModelTooltip,\r\n      differentialTestTooltip: '',\r\n    });\r\n    this.props.onSetTestsMetadata(differentialTestsMetadataVar);\r\n    this.getReportLink(differentialStudy, value);\r\n  };\r\n\r\n  handleTestChange = (evt, { name, value }) => {\r\n    const {\r\n      differentialStudy,\r\n      differentialModel,\r\n      onMultisetQueriedDifferential,\r\n      onSearchCriteriaChangeDifferential,\r\n      onSearchTransitionDifferential,\r\n    } = this.props;\r\n    onSearchTransitionDifferential(true);\r\n    onMultisetQueriedDifferential(false);\r\n    const differentialTestMeta = this.props.differentialTestsMetadata.find(\r\n      test => test.testID === value,\r\n    );\r\n    const differentialTestTooltip = differentialTestMeta?.testDisplay || '';\r\n    this.setState({\r\n      differentialTestTooltip: differentialTestTooltip,\r\n      reloadPlotP: true,\r\n      multisetFiltersVisibleDifferential: false,\r\n      sigValP: this.state.uSettingsP.defaultSigValueP,\r\n    });\r\n    onSearchCriteriaChangeDifferential(\r\n      {\r\n        differentialStudy: differentialStudy,\r\n        differentialModel: differentialModel,\r\n        [name]: value,\r\n      },\r\n      true,\r\n    );\r\n    cancelRequestPSCGetResultsTable();\r\n    let cancelToken = new CancelToken(e => {\r\n      cancelRequestPSCGetResultsTable = e;\r\n    });\r\n    // let promises =\r\n    omicNavigatorService\r\n      .getResultsTable(\r\n        differentialStudy,\r\n        differentialModel,\r\n        value,\r\n        onSearchTransitionDifferential,\r\n        cancelToken,\r\n      )\r\n      .then(getResultsTableData => {\r\n        // debugger;\r\n        // getResultsTableData = getResultsTableData.json();\r\n        if (getResultsTableData != null) {\r\n          if (getResultsTableData.length > 0) {\r\n            this.handleGetResultsTableData(\r\n              getResultsTableData,\r\n              true,\r\n              true,\r\n              value,\r\n            );\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getResultsTable', error);\r\n      });\r\n    // Promise.all(promises).finally(() => {\r\n    //   debugger;\r\n    // });\r\n  };\r\n\r\n  handleGetResultsTableData = (\r\n    tableData,\r\n    resetMultiset,\r\n    handleMaxElements,\r\n    differentialTest,\r\n  ) => {\r\n    const { onDifferentialSearchUnfiltered, onDifferentialSearch } = this.props;\r\n    if (resetMultiset) {\r\n      this.setState({\r\n        uSettingsP: {\r\n          ...this.state.uSettingsP,\r\n          mustP: [],\r\n          notP: [],\r\n          maxElementsP: handleMaxElements ? tableData.length : 0,\r\n        },\r\n        sigValueP: [0.05],\r\n        uAnchorP: differentialTest,\r\n      });\r\n    }\r\n    onDifferentialSearchUnfiltered({ differentialResults: tableData });\r\n    onDifferentialSearch({ differentialResults: tableData });\r\n  };\r\n\r\n  handleMultisetToggle = () => {\r\n    return evt => {\r\n      if (this.state.multisetFiltersVisibleDifferential === false) {\r\n        // on toggle open\r\n        this.props.onMultisetQueriedDifferential(true);\r\n        this.props.onSearchTransitionDifferentialAlt(true);\r\n        if (this.state.selectedColP.length === 0) {\r\n          const uSetVP = { ...this.state.uSettingsP };\r\n          const defaultCol = this.props.thresholdColsP[0];\r\n          uSetVP.defaultselectedColP = defaultCol;\r\n          this.setState({\r\n            selectedColP: [defaultCol],\r\n            uSettingsP: uSetVP,\r\n          });\r\n        }\r\n        this.setState(\r\n          {\r\n            reloadPlotP: true,\r\n            multisetFiltersVisibleDifferential: true,\r\n          },\r\n          function() {\r\n            this.updateQueryDataP();\r\n          },\r\n        );\r\n      } else {\r\n        // on toggle close\r\n        this.props.onMultisetQueriedDifferential(false);\r\n        this.setState({\r\n          multisetFiltersVisibleDifferential: false,\r\n          reloadPlotP: false,\r\n          initialRenderP: true,\r\n        });\r\n        const differentialTestName = 'differentialTest';\r\n        const differentialTestVar = this.props.differentialTest;\r\n        this.multisetTriggeredTestChange(\r\n          differentialTestName,\r\n          differentialTestVar,\r\n        );\r\n      }\r\n    };\r\n  };\r\n\r\n  handleMultisetOpenErrorDifferential = () => {\r\n    cancelRequestInferenceMultisetPlot();\r\n    this.setState({\r\n      multisetFiltersVisibleDifferential: false,\r\n    });\r\n    console.log('Error during getResultsIntersection');\r\n  };\r\n\r\n  handleMultisetPCloseError = () => {\r\n    this.props.onSearchTransitionDifferentialAlt(false);\r\n    this.props.onHandleVolcanoTableLoading(false);\r\n    this.setState(\r\n      {\r\n        multisetFiltersVisibleDifferential: true,\r\n        reloadPlotP: true,\r\n      },\r\n      this.updateQueryDataP(),\r\n    );\r\n    console.log('Error during getResultsTable');\r\n  };\r\n\r\n  multisetTriggeredTestChange = (name, value) => {\r\n    const {\r\n      differentialStudy,\r\n      differentialModel,\r\n      onSearchCriteriaChangeDifferential,\r\n      onSearchTransitionDifferentialAlt,\r\n    } = this.props;\r\n    onSearchTransitionDifferentialAlt(true);\r\n    onSearchCriteriaChangeDifferential(\r\n      {\r\n        differentialStudy: differentialStudy,\r\n        differentialModel: differentialModel,\r\n        [name]: value,\r\n      },\r\n      true,\r\n    );\r\n    cancelRequestPSCGetResultsTable();\r\n    let cancelToken = new CancelToken(e => {\r\n      cancelRequestPSCGetResultsTable = e;\r\n    });\r\n    omicNavigatorService\r\n      .getResultsTable(\r\n        differentialStudy,\r\n        differentialModel,\r\n        value,\r\n        this.handleMultisetPCloseError,\r\n        cancelToken,\r\n      )\r\n      .then(getResultsTableData => {\r\n        // debugger;\r\n        // getResultsTableData = getResultsTableData.json();\r\n        if (getResultsTableData != null) {\r\n          if (getResultsTableData.length > 0) {\r\n            this.handleGetResultsTableData(\r\n              getResultsTableData,\r\n              false,\r\n              false,\r\n              value,\r\n            );\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getResultsTable', error);\r\n      });\r\n  };\r\n\r\n  addFilterDifferential = () => {\r\n    this.props.onHandleVolcanoTableLoading(true);\r\n    // this.setState({ loadingDifferentialMultisetFilters: true });\r\n    // const uSetVP = _.cloneDeep(this.state.uSettingsP);\r\n    const uSetVP = { ...this.state.uSettingsP };\r\n    uSetVP.indexFiltersP = [...this.state.uSettingsP.indexFiltersP].concat(\r\n      this.state.uSettingsP.indexFiltersP.length,\r\n    );\r\n    this.setState({\r\n      selectedColP: [...this.state.selectedColP].concat(\r\n        this.state.uSettingsP.defaultselectedColP,\r\n      ),\r\n      selectedOperatorP: [...this.state.selectedOperatorP].concat(\r\n        this.state.uSettingsP.defaultselectedOperatorP,\r\n      ),\r\n      sigValueP: [...this.state.sigValueP].concat(\r\n        this.state.uSettingsP.defaultSigValueP,\r\n      ),\r\n      uSettingsP: uSetVP,\r\n    });\r\n  };\r\n\r\n  removeFilterDifferential = index => {\r\n    this.props.onHandleVolcanoTableLoading(true);\r\n    // this.setState({ loadingDifferentialMultisetFilters: true });\r\n    const uSetVP = { ...this.state.uSettingsP };\r\n    uSetVP.indexFiltersP = [...uSetVP.indexFiltersP]\r\n      .slice(0, index)\r\n      .concat([...uSetVP.indexFiltersP].slice(index + 1));\r\n    for (var i = index; i < uSetVP.indexFiltersP.length; i++) {\r\n      uSetVP.indexFiltersP[i]--;\r\n    }\r\n    this.setState(\r\n      {\r\n        selectedColP: [...this.state.selectedColP]\r\n          .slice(0, index)\r\n          .concat([...this.state.selectedColP].slice(index + 1)),\r\n        selectedOperatorP: [...this.state.selectedOperatorP]\r\n          .slice(0, index)\r\n          .concat([...this.state.selectedOperatorP].slice(index + 1)),\r\n        sigValueP: [...this.state.sigValueP]\r\n          .slice(0, index)\r\n          .concat([...this.state.sigValueP].slice(index + 1)),\r\n        uSettingsP: uSetVP,\r\n      },\r\n      function() {\r\n        this.updateQueryDataP();\r\n      },\r\n    );\r\n  };\r\n  changeHoveredFilter = index => {\r\n    const uSetVP = { ...this.state.uSettingsP };\r\n    uSetVP.hoveredFilter = index;\r\n    this.setState({ uSettingsP: uSetVP });\r\n  };\r\n  handleDropdownChange = (evt, { name, value, index }) => {\r\n    this.props.onHandleVolcanoTableLoading(true);\r\n    const uSelVP = [...this.state[name]];\r\n    uSelVP[index] = {\r\n      key: value,\r\n      text: value,\r\n      value: value,\r\n    };\r\n    this.setState(\r\n      {\r\n        [name]: uSelVP,\r\n        reloadPlotP: false,\r\n      },\r\n      function() {\r\n        this.updateQueryDataP();\r\n      },\r\n    );\r\n  };\r\n  handleSigValuePInputChange = (name, value, index) => {\r\n    if (!this.state.initialRenderP) {\r\n      this.props.onHandleVolcanoTableLoading(true);\r\n    }\r\n    const uSelVP = [...this.state[name]];\r\n    uSelVP[index] = parseFloat(value);\r\n    this.setState(\r\n      {\r\n        [name]: uSelVP,\r\n        reloadPlotP: true,\r\n        initialRenderP: false,\r\n      },\r\n      function() {\r\n        this.updateQueryDataP();\r\n      },\r\n    );\r\n  };\r\n  handleSetChange = ({ mustP, notP }) => {\r\n    this.props.onHandleVolcanoTableLoading(true);\r\n    const uSettingsVP = this.state.uSettingsP;\r\n    uSettingsVP.mustP = mustP;\r\n    uSettingsVP.notP = notP;\r\n    this.setState(\r\n      {\r\n        uSettingsP: uSettingsVP,\r\n        reloadPlotP: false,\r\n      },\r\n      function() {\r\n        this.updateQueryDataP();\r\n      },\r\n    );\r\n  };\r\n\r\n  updateQueryDataP = () => {\r\n    const {\r\n      differentialStudy,\r\n      differentialModel,\r\n      differentialTest,\r\n      onDifferentialSearch,\r\n      onDisablePlotDifferential,\r\n    } = this.props;\r\n    const {\r\n      selectedOperatorP,\r\n      reloadPlotP,\r\n      sigValueP,\r\n      selectedColP,\r\n      differentialTests,\r\n    } = this.state;\r\n    const eMustP = this.state.uSettingsP.mustP;\r\n    const eNotP = this.state.uSettingsP.notP;\r\n    cancelRequestMultisetInferenceData();\r\n    let cancelToken = new CancelToken(e => {\r\n      cancelRequestMultisetInferenceData = e;\r\n    });\r\n    omicNavigatorService\r\n      .getResultsIntersection(\r\n        differentialStudy,\r\n        differentialModel,\r\n        differentialTest,\r\n        eMustP,\r\n        eNotP,\r\n        sigValueP,\r\n        this.jsonToList(selectedOperatorP),\r\n        this.jsonToList(selectedColP),\r\n        this.handleMultisetOpenErrorDifferential,\r\n        cancelToken,\r\n      )\r\n      .then(inferenceData => {\r\n        const multisetResultsP = inferenceData;\r\n        this.setState({\r\n          uSettingsP: {\r\n            ...this.state.uSettingsP,\r\n            numElementsP: multisetResultsP.length,\r\n            maxElementsP: this.state.uSettingsP.maxElementsP,\r\n            mustP: eMustP,\r\n            notP: eNotP,\r\n          },\r\n          activateMultisetFiltersP: true,\r\n          reloadPlotP: false,\r\n          // loadingDifferentialMultisetFilters: false,\r\n        });\r\n        onDifferentialSearch({\r\n          differentialResults: multisetResultsP,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getResultsIntersection', error);\r\n      });\r\n    //   const testsLength =\r\n    //   typeof differentialTests === 'string' ? 1 : differentialTests.length;\r\n    // if (reloadPlotP === true && testsLength > 1) {\r\n    if (reloadPlotP === true && differentialTests.length > 1) {\r\n      onDisablePlotDifferential();\r\n      this.getMultisetPlot(\r\n        sigValueP,\r\n        differentialModel,\r\n        differentialStudy,\r\n        this.jsonToList(selectedOperatorP),\r\n        this.jsonToList(selectedColP),\r\n      );\r\n    }\r\n  };\r\n\r\n  jsonToList(json) {\r\n    var valueList = [];\r\n    for (var i = 0; i < json.length; i++) {\r\n      valueList.push(json[i].value);\r\n    }\r\n    return valueList;\r\n  }\r\n\r\n  getMultisetPlot(\r\n    sigVal,\r\n    differentialModel,\r\n    differentialStudy,\r\n    eOperatorP,\r\n    eColP,\r\n  ) {\r\n    cancelRequestInferenceMultisetPlot();\r\n    let cancelToken = new CancelToken(e => {\r\n      cancelRequestInferenceMultisetPlot = e;\r\n    });\r\n    omicNavigatorService\r\n      .getResultsUpset(\r\n        differentialStudy,\r\n        differentialModel,\r\n        sigVal,\r\n        eOperatorP,\r\n        eColP,\r\n        undefined,\r\n        cancelToken,\r\n      )\r\n      .then(svgMarkupRaw => {\r\n        let svgMarkup = svgMarkupRaw.data;\r\n        svgMarkup = svgMarkup.replace(\r\n          /<svg/g,\r\n          '<svg preserveAspectRatio=\"xMinYMid meet\" id=\"differentialMultisetAnalysisSVG\"',\r\n        );\r\n        DOMPurify.addHook('afterSanitizeAttributes', function(node) {\r\n          if (\r\n            node.hasAttribute('xlink:href') &&\r\n            !node.getAttribute('xlink:href').match(/^#/)\r\n          ) {\r\n            node.remove();\r\n          }\r\n        });\r\n        // Clean HTML string and write into our DIV\r\n        let sanitizedSVG = DOMPurify.sanitize(svgMarkup, {\r\n          ADD_TAGS: ['use'],\r\n        });\r\n        let svgInfo = { plotType: 'Multiset', svg: sanitizedSVG };\r\n        // let svgInfo = { plotType: 'Multiset', svg: svgMarkup };\r\n        this.props.onGetMultisetPlotDifferential({\r\n          svgInfo,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getResultsUpset', error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      differentialStudies,\r\n      differentialStudyHref,\r\n      differentialStudyHrefVisible,\r\n      differentialModels,\r\n      differentialModelTooltip,\r\n      differentialTests,\r\n      differentialTestTooltip,\r\n      differentialStudiesDisabled,\r\n      differentialModelsDisabled,\r\n      differentialTestsDisabled,\r\n      multisetFiltersVisibleDifferential,\r\n      activateMultisetFiltersP,\r\n    } = this.state;\r\n\r\n    const {\r\n      differentialStudy,\r\n      differentialModel,\r\n      differentialTest,\r\n      isValidSearchDifferential,\r\n      multisetPlotAvailableDifferential,\r\n      plotButtonActiveDifferential,\r\n    } = this.props;\r\n\r\n    const StudyPopupStyle = {\r\n      backgroundColor: '2E2E2E',\r\n      borderBottom: '2px solid var(--color-primary)',\r\n      color: '#FFF',\r\n      padding: '1em',\r\n      fontSize: '13px',\r\n    };\r\n\r\n    let studyIcon;\r\n    let studyName = `${differentialStudy} Analysis Details`;\r\n\r\n    if (differentialStudyHrefVisible) {\r\n      studyIcon = (\r\n        <Popup\r\n          trigger={\r\n            <a\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n              href={differentialStudyHref}\r\n            >\r\n              <Icon\r\n                name=\"line graph\"\r\n                size=\"large\"\r\n                className=\"StudyHtmlIcon\"\r\n                inverted\r\n                circular\r\n              />\r\n            </a>\r\n          }\r\n          style={StudyPopupStyle}\r\n          className=\"CustomTooltip\"\r\n          inverted\r\n          basic\r\n          position=\"bottom center\"\r\n          content={studyName}\r\n          mouseEnterDelay={0}\r\n          mouseLeaveDelay={0}\r\n        />\r\n      );\r\n    } else {\r\n      studyIcon = (\r\n        <Popup\r\n          trigger={\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={'/'}>\r\n              <Icon name=\"line graph\" size=\"large\" circular inverted disabled />\r\n            </a>\r\n          }\r\n          style={StudyPopupStyle}\r\n          basic\r\n          inverted\r\n          className=\"CustomTooltip\"\r\n          position=\"bottom center\"\r\n          content={this.state.differentialStudyReportTooltip}\r\n          mouseEnterDelay={0}\r\n          mouseLeaveDelay={0}\r\n        />\r\n      );\r\n    }\r\n\r\n    let PMultisetFilters;\r\n    if (\r\n      isValidSearchDifferential &&\r\n      activateMultisetFiltersP &&\r\n      multisetFiltersVisibleDifferential\r\n    ) {\r\n      PMultisetFilters = (\r\n        <DifferentialMultisetFilters\r\n          {...this.props}\r\n          {...this.state}\r\n          onHandleDropdownChange={this.handleDropdownChange}\r\n          onHandleSigValuePInputChange={this.handleSigValuePInputChange}\r\n          onHandleSetChange={this.handleSetChange}\r\n          onAddFilterDifferential={this.addFilterDifferential}\r\n          onRemoveFilterDifferential={this.removeFilterDifferential}\r\n          onChangeHoveredFilter={this.changeHoveredFilter}\r\n        />\r\n      );\r\n    }\r\n\r\n    let PlotRadio;\r\n    let MultisetRadio;\r\n\r\n    if (isValidSearchDifferential) {\r\n      PlotRadio = (\r\n        <Transition\r\n          visible={!multisetPlotAvailableDifferential}\r\n          animation=\"flash\"\r\n          duration={1500}\r\n        >\r\n          <Radio\r\n            toggle\r\n            label=\"View Plot\"\r\n            className={multisetPlotAvailableDifferential ? 'ViewPlotRadio' : ''}\r\n            checked={plotButtonActiveDifferential}\r\n            onChange={this.props.onHandlePlotAnimationDifferential('uncover')}\r\n            disabled={!multisetPlotAvailableDifferential}\r\n          />\r\n        </Transition>\r\n      );\r\n\r\n      MultisetRadio = (\r\n        <React.Fragment>\r\n          <Divider />\r\n          <Radio\r\n            toggle\r\n            label=\"Set Analysis\"\r\n            checked={multisetFiltersVisibleDifferential}\r\n            onChange={this.handleMultisetToggle()}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Form className=\"SearchCriteriaContainer\">\r\n          <Form.Field\r\n            control={Select}\r\n            name=\"differentialStudy\"\r\n            value={differentialStudy}\r\n            options={differentialStudies}\r\n            placeholder=\"Select A Study\"\r\n            onChange={this.handleStudyChange}\r\n            disabled={differentialStudiesDisabled}\r\n            label={{\r\n              children: 'Study',\r\n              htmlFor: 'form-select-control-pstudy',\r\n            }}\r\n            search\r\n            searchInput={{ id: 'form-select-control-pstudy' }}\r\n            width={13}\r\n            selectOnBlur={false}\r\n            selectOnNavigation={false}\r\n          />\r\n          <span className=\"StudyHtmlIconDivP\">{studyIcon}</span>\r\n          <Popup\r\n            trigger={\r\n              <Form.Field\r\n                control={Select}\r\n                name=\"differentialModel\"\r\n                value={differentialModel}\r\n                options={differentialModels}\r\n                placeholder=\"Select Model\"\r\n                onChange={this.handleModelChange}\r\n                disabled={differentialModelsDisabled}\r\n                label={{\r\n                  children: 'Model',\r\n                  htmlFor: 'form-select-control-pmodel',\r\n                }}\r\n                search\r\n                searchInput={{ id: 'form-select-control-pmodel' }}\r\n                selectOnBlur={false}\r\n                selectOnNavigation={false}\r\n              />\r\n            }\r\n            style={StudyPopupStyle}\r\n            disabled={differentialModelTooltip === ''}\r\n            className=\"CustomTooltip\"\r\n            inverted\r\n            position=\"bottom right\"\r\n            content={differentialModelTooltip}\r\n            mouseEnterDelay={1000}\r\n            mouseLeaveDelay={0}\r\n          />\r\n          <Popup\r\n            trigger={\r\n              <Form.Field\r\n                control={Select}\r\n                name=\"differentialTest\"\r\n                value={differentialTest}\r\n                options={differentialTests}\r\n                placeholder=\"Select Test\"\r\n                onChange={this.handleTestChange}\r\n                disabled={differentialTestsDisabled}\r\n                label={{\r\n                  children: 'Test',\r\n                  htmlFor: 'form-select-control-ptest',\r\n                }}\r\n                search\r\n                searchInput={{ id: 'form-select-control-ptest' }}\r\n                selectOnBlur={false}\r\n                selectOnNavigation={false}\r\n              />\r\n            }\r\n            style={StudyPopupStyle}\r\n            disabled={differentialTestTooltip === ''}\r\n            className=\"CustomTooltip\"\r\n            inverted\r\n            position=\"bottom right\"\r\n            content={differentialTestTooltip}\r\n            mouseEnterDelay={1000}\r\n            mouseLeaveDelay={0}\r\n          />\r\n        </Form>\r\n        <div className=\"MultisetContainer\">\r\n          <div className=\"SliderDiv\">\r\n            <span className=\"MultisetRadio\">{MultisetRadio}</span>\r\n            <span className=\"PlotRadio\">{PlotRadio}</span>\r\n          </div>\r\n          <div className=\"MultisetFiltersDiv\">{PMultisetFilters}</div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DifferentialSearchCriteria);\r\n","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\Templates.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\SplitPanesContainer.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\services\\pdf.service.js",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\SVGPlot.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialPlot.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\SearchingAlt.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentBreadcrumbs.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\FilteredDifferentialTable.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialBreadcrumbs.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentResultsGraph.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentMultisetFilters.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\NetworkGraph.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcanoPlot.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\ViolinPlot.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\App.jsx",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":208,"column":32,"nodeType":"119","messageId":"120","endLine":243,"endColumn":8},{"ruleId":"121","severity":1,"message":"122","line":227,"column":17,"nodeType":"123","messageId":"124","endLine":227,"endColumn":30},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'nowInBucket', 'nowInBucket', 'nowInBucket', 'keepGoing', 'keepGoing', 'keepGoing'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'fetchResponse' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]