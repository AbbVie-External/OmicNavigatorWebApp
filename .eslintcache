[{"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\services\\omicNavigator.service.js":"1","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\Enrichment.jsx":"2","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\index.js":"3","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\UrlControl.jsx":"4","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\Differential.jsx":"5","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionStill.jsx":"6","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionActive.jsx":"7","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialSearchCriteria.jsx":"8","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\SVGPlot.jsx":"9","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcanoPlot.jsx":"10","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentSearchCriteria.jsx":"11","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentBreadcrumbs.jsx":"12","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcano.jsx":"13","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\FilteredDifferentialTable.jsx":"14","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\ViolinPlot.jsx":"15"},{"size":14462,"mtime":1610476924945,"results":"16","hashOfConfig":"17"},{"size":73727,"mtime":1610483654858,"results":"18","hashOfConfig":"17"},{"size":526,"mtime":1609791892021,"results":"19","hashOfConfig":"17"},{"size":9471,"mtime":1609791891789,"results":"20","hashOfConfig":"17"},{"size":30023,"mtime":1610483176063,"results":"21","hashOfConfig":"17"},{"size":1065,"mtime":1609791891943,"results":"22","hashOfConfig":"17"},{"size":956,"mtime":1609791891883,"results":"23","hashOfConfig":"17"},{"size":37696,"mtime":1610381557425,"results":"24","hashOfConfig":"17"},{"size":5072,"mtime":1609791891766,"results":"25","hashOfConfig":"17"},{"size":23091,"mtime":1609791891403,"results":"26","hashOfConfig":"17"},{"size":43612,"mtime":1610480769560,"results":"27","hashOfConfig":"17"},{"size":3918,"mtime":1609791891542,"results":"28","hashOfConfig":"17"},{"size":35021,"mtime":1610483213224,"results":"29","hashOfConfig":"17"},{"size":17250,"mtime":1610483380180,"results":"30","hashOfConfig":"17"},{"size":62707,"mtime":1610488221851,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1asxuey",{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\services\\omicNavigator.service.js",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\Enrichment.jsx",["63","64"],"import DOMPurify from 'dompurify';\r\nimport _ from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Grid, Menu, Popup, Sidebar, Tab, Message } from 'semantic-ui-react';\r\n// import ndjsonStream from 'can-ndjson-stream';\r\nimport { CancelToken } from 'axios';\r\nimport networkIcon from '../../resources/networkIcon.png';\r\nimport networkIconSelected from '../../resources/networkIconSelected.png';\r\nimport tableIcon from '../../resources/tableIcon.png';\r\nimport tableIconSelected from '../../resources/tableIconSelected.png';\r\nimport { omicNavigatorService } from '../../services/omicNavigator.service';\r\nimport ButtonActions from '../Shared/ButtonActions';\r\nimport * as d3 from 'd3';\r\nimport {\r\n  formatNumberForDisplay,\r\n  splitValue,\r\n  getLinkout,\r\n} from '../Shared/helpers';\r\nimport '../Shared/Table.scss';\r\nimport SearchingAlt from '../Transitions/SearchingAlt';\r\nimport TransitionActive from '../Transitions/TransitionActive';\r\nimport TransitionStill from '../Transitions/TransitionStill';\r\nimport './Enrichment.scss';\r\nimport EnrichmentResultsGraph from './EnrichmentResultsGraph';\r\nimport EnrichmentSearchCriteria from './EnrichmentSearchCriteria';\r\nimport SplitPanesContainer from './SplitPanesContainer';\r\nimport CustomEmptyMessage from '../Shared/Templates';\r\n// eslint-disable-next-line no-unused-vars\r\nimport QHGrid, { EZGrid } from '***REMOVED***';\r\n\r\nlet cancelRequestEnrichmentGetPlot = () => {};\r\nlet cancelRequestGetEnrichmentsNetwork = () => {};\r\nconst cacheGetEnrichmentsNetwork = {};\r\nconst baseUrl =\r\n  process.env.NODE_ENV === 'development'\r\n    ? '***REMOVED***'\r\n    : window.location.origin;\r\nconst fetchUrlEnrichmentsNetwork = `${baseUrl}/ocpu/library/OmicNavigator/R/getEnrichmentsNetwork/ndjson`;\r\nasync function* streamAsyncIterable(reader) {\r\n  while (true) {\r\n    const { done, value } = await reader.read();\r\n    if (done) {\r\n      return;\r\n    }\r\n    yield value;\r\n  }\r\n}\r\n\r\nclass Enrichment extends Component {\r\n  storedEnrichmentActiveIndex =\r\n    parseInt(sessionStorage.getItem('enrichmentViewTab'), 10) || 0;\r\n\r\n  state = {\r\n    isValidSearchEnrichment: false,\r\n    isSearchingEnrichment: false,\r\n    isEnrichmentTableLoading: false,\r\n    enrichmentResults: [],\r\n    enrichmentColumns: [],\r\n    enrichmentFeatureID: '',\r\n    enrichmentPlotSVGHeight: 0,\r\n    enrichmentPlotSVGWidth: 0,\r\n    activeIndexEnrichmentView: this.storedEnrichmentActiveIndex || 0,\r\n    multisetPlotInfoEnrichment: {\r\n      title: '',\r\n      svg: [],\r\n    },\r\n    multisetPlotAvailableEnrichment: false,\r\n    animationEnrichment: 'uncover',\r\n    directionEnrichment: 'left',\r\n    visibleEnrichment: false,\r\n    plotButtonActiveEnrichment: false,\r\n    uData: [],\r\n    displayViolinPlot: true,\r\n    // networkDataAvailable: false,\r\n    networkData: {\r\n      nodes: [],\r\n      links: [],\r\n      tests: [],\r\n    },\r\n    unfilteredNetworkData: {\r\n      nodes: [],\r\n      links: [],\r\n      tests: [],\r\n    },\r\n    filterNetworkFromUpset: [],\r\n    networkDataLoaded: false,\r\n    networkGraphReady: false,\r\n    networkDataError: false,\r\n    tests: {},\r\n    nodeCutoff: sessionStorage.getItem('nodeCutoff') || 0.1,\r\n    linkCutoff: sessionStorage.getItem('linkCutoff') || 0.4,\r\n    linkType: sessionStorage.getItem('linkType') || 0.5,\r\n    filteredNodesTotal: 0,\r\n    filteredLinksTotal: 0,\r\n    totalNodes: 0,\r\n    totalLinks: 0,\r\n    legendIsOpen: true,\r\n    // legendIsOpen: JSON.parse(sessionStorage.getItem('legendOpen')) || true,\r\n    networkSettings: {\r\n      facets: {},\r\n      propLabel: {},\r\n      metaLabels: ['description', 'termID'],\r\n      meta: ['description', 'termID'],\r\n      facetAndValueLabel: ['Test', 'pValue'],\r\n      nodeLabel: 'description',\r\n      radiusScale: [10, 50],\r\n      lineScale: [1, 10],\r\n      nodeSize: 'geneSetSize',\r\n      linkSize: 'overlapSize',\r\n      linkMetaLabels: ['Overlap Size', 'Source', 'Target'],\r\n      linkMeta: ['overlapSize', 'source', 'target'],\r\n      linkMetaLookup: ['description', 'description'],\r\n      nodeColorScale: [0, 0.1, 1],\r\n      nodeColors: ['red', 'white', 'blue'],\r\n      mostSignificantColorScale: ['#B78628', '#DBA514', '#FCC201'],\r\n      title: '',\r\n      id: 'chart-network',\r\n      margin: { top: 50, right: 50, bottom: 50, left: 0 },\r\n      duration: 1000,\r\n    },\r\n    annotationData: [],\r\n    enrichmentDataItem: [],\r\n    enrichmentTerm: '',\r\n    itemsPerPageInformedEnrichmentMain: null,\r\n    plotType: [],\r\n    imageInfo: {\r\n      key: null,\r\n      title: '',\r\n      svg: [],\r\n      dataItem: '',\r\n    },\r\n    cachedSVGs: [],\r\n    isTestSelected: false,\r\n    isTestDataLoaded: false,\r\n    SVGPlotLoading: false,\r\n    SVGPlotLoaded: false,\r\n    isViolinPlotLoaded: false,\r\n    // hasBarcodeData: true,\r\n    barcodeSettings: {\r\n      barcodeData: [],\r\n      brushedData: [],\r\n      lineID: '',\r\n      statLabel: {},\r\n      statistic: 'statistic',\r\n      logFC: 'logFC',\r\n      highLabel: {},\r\n      lowLabel: {},\r\n      highStat: null,\r\n      enableBrush: false,\r\n    },\r\n    violinSettings: {\r\n      axisLabels: {\r\n        xAxis: 'abs(t)',\r\n        yAxis: \"log<tspan baseline-shift='sub' font-size='14px'>2</tspan>FC\",\r\n      },\r\n      // axisLabels: { xAxis: this.term, yAxis: \"log<tspan baseline-shift='sub' font-size='14px'>2</tspan>(FC)\" },\r\n      parentId: 'ViolinChartParent',\r\n      id: 'ViolinChart',\r\n      pointUniqueId: 'sample',\r\n      pointValue: 'cpm',\r\n      title: '',\r\n      subtitle: '',\r\n      tooltip: {\r\n        show: true,\r\n        fields: [\r\n          { label: 'log(FC)', value: 'cpm', toFixed: true },\r\n          { label: 'Feature', value: 'sample' },\r\n          // { label: 'featureID', value: 'featureID' },\r\n          // { label: 'abs(t)', value: 'statistic', toFixed: true },\r\n        ],\r\n      },\r\n      xName: 'tissue',\r\n      constrainExtremes: false,\r\n      color: d3.scaleOrdinal(d3.schemeCategory10),\r\n      margin: { top: 10, right: 30, bottom: 50, left: 60 },\r\n      scale: 'linear',\r\n      yName: null,\r\n      yTicks: 1,\r\n    },\r\n    violinData: [],\r\n    HighlightedProteins: [],\r\n    enrichmentPlotTypes: [],\r\n    enrichmentStudyMetadata: [],\r\n    enrichmentModelsAndAnnotations: [],\r\n    enrichmentAnnotationsMetadata: [],\r\n    enrichmentsLinkouts: [],\r\n    enrichmentFeatureIdKey: '',\r\n    // filteredDifferentialFeatureIdKey: '',\r\n    multisetQueriedEnrichment: false,\r\n    reloadPlot: false,\r\n    networkSigValue: '0.05',\r\n    networkOperator: '<',\r\n    networkTestsMust: [],\r\n    networkTestsNot: [],\r\n    previousEnrichmentStudy: '',\r\n    previousEnrichmentModel: '',\r\n    previousEnrichmentAnnotation: '',\r\n    multisetTestsFilteredOut: [],\r\n    enrichmentColumnsUnfiltered: [],\r\n    itemsPerPageEnrichmentTable:\r\n      parseInt(localStorage.getItem('itemsPerPageEnrichmentTable'), 10) || 45,\r\n    isDataStreamingEnrichmentsTable: false,\r\n  };\r\n  EnrichmentViewContainerRef = React.createRef();\r\n  EnrichmentGridRef = React.createRef();\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return nextProps.tab === 'enrichment';\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTableHelpers(this.testSelectedTransition, this.showBarcodePlot);\r\n    // let resizedFn;\r\n    // window.addEventListener('resize', () => {\r\n    //   clearTimeout(resizedFn);\r\n    //   resizedFn = setTimeout(() => {\r\n    //     this.windowResized();\r\n    //   }, 200);\r\n    // });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.enrichmentResults !== prevState.enrichmentResults) {\r\n      const DescriptionAndTest = this.props.enrichmentTestAndDescription || '';\r\n      if (DescriptionAndTest !== '') {\r\n        const AllDescriptionsAndTests = this.state.enrichmentResults;\r\n        const ResultsLength = this.state.enrichmentResults.length;\r\n        if (ResultsLength > 0) {\r\n          const dataItemDescription = getDataItemDescription(\r\n            DescriptionAndTest,\r\n          );\r\n          const dataItemIndex = _.findIndex(AllDescriptionsAndTests, function(\r\n            d,\r\n          ) {\r\n            return d.description === dataItemDescription;\r\n          });\r\n          const dataItem = AllDescriptionsAndTests[dataItemIndex];\r\n          const test = getTestName(DescriptionAndTest);\r\n          // const testNameIndex = _.findIndex(dataItem, function(n) {\r\n          //   return n.key === testName;\r\n          // });\r\n          // const test = dataItem[testNameIndex];\r\n          this.getThreePlotsFromUrl(\r\n            this.props.enrichmentStudy,\r\n            this.props.enrichmentModel,\r\n            this.props.enrichmentAnnotation,\r\n            dataItem,\r\n            test,\r\n            this.testSelectedTransition,\r\n            this.showBarcodePlot,\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // windowResized = () => {\r\n  //   this.setState({\r\n  //     nodeCutoff: this.state.nodeCutoff,\r\n  //     linkCutoff: this.state.linkCutoff,\r\n  //   });\r\n  // };\r\n\r\n  getThreePlotsFromUrl = (\r\n    enrichmentStudy,\r\n    enrichmentModel,\r\n    enrichmentAnnotation,\r\n    dataItem,\r\n    test,\r\n    testSelectedTransitionCb,\r\n    showBarcodePlotCb,\r\n  ) => {\r\n    let self = this;\r\n    testSelectedTransitionCb(true);\r\n    // const TestSiteVar = `${test}:${dataItem.description}`;\r\n    // let xLargest = 0;\r\n    // let imageInfo = { key: '', title: '', svg: [] };\r\n    // omicNavigatorService\r\n    //   .getDatabaseInfo(\r\n    //     enrichmentStudy + 'plots',\r\n    //     enrichmentAnnotation,\r\n    //     this.handleGetDatabaseInfoError,\r\n    //   )\r\n    //   .then(annotationDataResponse => {\r\n    //     const annotationDataParsed = JSON.parse(annotationDataResponse);\r\n    //     self.setState({\r\n    //       annotationData: annotationDataParsed,\r\n    //     });\r\n    //     dataItem.Annotation = _.find(annotationDataParsed, {\r\n    //       Description: dataItem.description,\r\n    //     }).Key;\r\n    let term = dataItem.termID;\r\n    self.setState({\r\n      imageInfo: {\r\n        ...self.state.imageInfo,\r\n        key: `${test}:${dataItem.description}`,\r\n        title: `${test}:${dataItem.description}`,\r\n      },\r\n      enrichmentNameLoaded: true,\r\n      enrichmentDataItem: dataItem,\r\n      enrichmentTerm: term,\r\n    });\r\n\r\n    omicNavigatorService\r\n      .getBarcodeData(\r\n        enrichmentStudy,\r\n        enrichmentModel,\r\n        test,\r\n        enrichmentAnnotation,\r\n        term,\r\n        this.handleGetBarcodeDataError,\r\n        null,\r\n      )\r\n      .then(barcodeDataResponse => {\r\n        if (barcodeDataResponse?.data?.length > 0) {\r\n          const logFoldChangeArr = barcodeDataResponse.data.map(\r\n            b => b.logFoldChange,\r\n          );\r\n          const isZero = logFoldChangeVal => logFoldChangeVal === 0;\r\n          if (logFoldChangeArr.every(isZero)) {\r\n            this.setState({\r\n              displayViolinPlot: false,\r\n            });\r\n          } else {\r\n            this.setState({\r\n              displayViolinPlot: true,\r\n            });\r\n          }\r\n          showBarcodePlotCb(barcodeDataResponse, dataItem);\r\n        } else {\r\n          // empty barcode data array\r\n          this.handleGetBarcodeDataError();\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getBarcodeData', error);\r\n      });\r\n    // })\r\n    // .catch(error => {\r\n    //   console.error('Error during getDatabaseInfo', error);\r\n    // });\r\n  };\r\n\r\n  handleMultisetTestsFiltered = (test, execute) => {\r\n    // this.handleSearchTransitionEnrichment(true);\r\n    // this.handleNetworkGraphReady(false);\r\n    // this.handleEnrichmentTableLoading(true);\r\n    const {\r\n      enrichmentColumnsUnfiltered,\r\n      unfilteredNetworkData,\r\n      enrichmentResults,\r\n    } = this.state;\r\n    var arr = [...this.state.multisetTestsFilteredOut];\r\n    if (test != null) {\r\n      const index = arr.indexOf(test);\r\n      if (index > -1) {\r\n        arr.splice(index, 1);\r\n      } else {\r\n        arr.push(test);\r\n      }\r\n      this.setState({\r\n        multisetTestsFilteredOut: arr,\r\n        // isEnrichmentTableLoading: false,\r\n        // isSearchingEnrichment: false,\r\n      });\r\n    }\r\n    var col = [...enrichmentColumnsUnfiltered];\r\n    if (arr.length > 0) {\r\n      col = col.filter(function(col) {\r\n        return !arr.includes(col.title);\r\n      });\r\n    }\r\n    if (execute) {\r\n      this.setState({\r\n        enrichmentColumns: col,\r\n        // isSearchingEnrichment: false,\r\n      });\r\n      this.handleEnrichmentNetworkData(\r\n        unfilteredNetworkData,\r\n        enrichmentResults,\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSearchTransitionEnrichment = bool => {\r\n    this.setState({\r\n      isSearchingEnrichment: bool,\r\n    });\r\n  };\r\n\r\n  handleMultisetQueriedEnrichment = value => {\r\n    this.setState({\r\n      multisetQueriedEnrichment: value,\r\n    });\r\n  };\r\n\r\n  setStudyModelAnnotationMetadata = (studyData, modelsAndAnnotations) => {\r\n    this.setState(\r\n      {\r\n        enrichmentStudyMetadata: studyData,\r\n        enrichmentModelsAndAnnotations: modelsAndAnnotations,\r\n      },\r\n      function() {\r\n        this.handlePlotTypesEnrichment(this.props.enrichmentModel);\r\n      },\r\n    );\r\n  };\r\n\r\n  setAnnotationsMetadata = annotationsData => {\r\n    this.setState({\r\n      enrichmentAnnotationsMetadata: annotationsData,\r\n    });\r\n  };\r\n\r\n  handleNetworkSigValue = val => {\r\n    this.setState({\r\n      networkSigValue: val.toString(),\r\n    });\r\n  };\r\n\r\n  handleNetworkOperator = op => {\r\n    this.setState({\r\n      networkOperator: op,\r\n    });\r\n  };\r\n  handleNetworkTests = (must, not) => {\r\n    this.setState({\r\n      networkTestsMust: must,\r\n      networkTestsNot: not,\r\n    });\r\n  };\r\n\r\n  handleEnrichmentSearch = (searchResults, enrichmentAnnotation) => {\r\n    const { multisetTestsFilteredOut } = this.state;\r\n    this.removeNetworkSVG();\r\n    this.setState({ networkGraphReady: false });\r\n\r\n    // cannot use this unless we can prevent first column (featureID) from being reordered\r\n    // if (this.state.enrichmentColumns.length === 0) {\r\n    //   this.handleColumnReorder(searchResults);\r\n    // }\r\n    let columns = [];\r\n    if (searchResults?.length > 0) {\r\n      columns = this.getConfigCols(searchResults);\r\n    }\r\n    this.setState({ enrichmentColumnsUnfiltered: columns });\r\n    if (multisetTestsFilteredOut.length > 0) {\r\n      columns = columns.filter(function(col) {\r\n        return !multisetTestsFilteredOut.includes(col.title);\r\n      });\r\n    }\r\n    this.getNetworkData(searchResults, enrichmentAnnotation);\r\n    this.setState({\r\n      networkDataError: false,\r\n      enrichmentResults: searchResults,\r\n      isSearchingEnrichment: false,\r\n      isEnrichmentTableLoading: false,\r\n      isValidSearchEnrichment: true,\r\n      plotButtonActiveEnrichment: false,\r\n      visible: false,\r\n      isTestSelected: false,\r\n      isTestDataLoaded: false,\r\n      enrichmentColumns: columns,\r\n    });\r\n  };\r\n\r\n  handleEnrichmentTableLoading = bool => {\r\n    this.setState({\r\n      isEnrichmentTableLoading: bool,\r\n    });\r\n  };\r\n\r\n  handleAnnotationChange = () => {\r\n    this.setState({\r\n      multisetTestsFilteredOut: [],\r\n      enrichmentColumnsUnfiltered: [],\r\n      multisetFiltersVisibleEnrichment: false,\r\n      enrichmentColumns: [],\r\n    });\r\n  };\r\n\r\n  // handleColumnReorder = searchResults => {\r\n  //   const columns = this.getConfigCols(searchResults);\r\n  //   this.setState({ enrichmentColumns: columns });\r\n  // };\r\n\r\n  handlePlotTypesEnrichment = enrichmentModel => {\r\n    if (enrichmentModel !== '') {\r\n      if (this.state.enrichmentStudyMetadata?.plots != null) {\r\n        const enrichmentModelData = this.state.enrichmentStudyMetadata.plots.find(\r\n          model => model.modelID === enrichmentModel,\r\n        );\r\n        this.setState({\r\n          enrichmentPlotTypes: enrichmentModelData.plots,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  handleSearchCriteriaChangeEnrichment = (changes, scChange) => {\r\n    this.props.onHandleUrlChange(changes, 'enrichment');\r\n    this.setState({\r\n      plotButtonActiveEnrichment: false,\r\n      visible: false,\r\n    });\r\n    if (scChange) {\r\n      this.setState({\r\n        multisetPlotAvailableEnrichment: false,\r\n      });\r\n    }\r\n    if (\r\n      changes.enrichmentAnnotation !== '' &&\r\n      changes.enrichmentAnnotation !== this.props.enrichmentAnnotation\r\n    ) {\r\n      this.getEnrichmentsLinkouts(\r\n        changes.enrichmentStudy,\r\n        changes.enrichmentAnnotation,\r\n      );\r\n    }\r\n  };\r\n\r\n  handleHasBarcodeData = () => {\r\n    const { enrichmentStudy, enrichmentModel } = this.props;\r\n    omicNavigatorService\r\n      .getBarcodes(enrichmentStudy, enrichmentModel, null, null)\r\n      .then(getBarcodesResponseData => {\r\n        this.setState({\r\n          hasBarcodeData: getBarcodesResponseData.length === 0 ? false : true,\r\n        });\r\n      });\r\n  };\r\n\r\n  getEnrichmentsLinkouts = (enrichmentStudy, enrichmentAnnotation) => {\r\n    omicNavigatorService\r\n      .getEnrichmentsLinkouts(enrichmentStudy, enrichmentAnnotation)\r\n      .then(getEnrichmentsLinkoutsResponseData => {\r\n        this.setState({\r\n          enrichmentsLinkouts: getEnrichmentsLinkoutsResponseData,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleIsDataStreamingEnrichmentsTable = bool => {\r\n    this.setState({\r\n      isDataStreamingEnrichmentsTable: bool,\r\n    });\r\n  };\r\n\r\n  disablePlotEnrichment = () => {\r\n    this.setState({\r\n      multisetPlotAvailableEnrichment: false,\r\n    });\r\n  };\r\n\r\n  handleSearchCriteriaResetEnrichment = () => {\r\n    this.setState({\r\n      isTestSelected: false,\r\n      isTestDataLoaded: false,\r\n      isValidSearchEnrichment: false,\r\n      multisetPlotAvailableEnrichment: false,\r\n      plotButtonActiveEnrichment: false,\r\n      visible: false,\r\n      // displayViolinPlot: false,\r\n    });\r\n  };\r\n\r\n  handlePlotAnimationEnrichment = animationEnrichment => () => {\r\n    this.setState(prevState => ({\r\n      animationEnrichment,\r\n      visibleEnrichment: !prevState.visibleEnrichment,\r\n      plotButtonActiveEnrichment: !this.state.plotButtonActiveEnrichment,\r\n    }));\r\n  };\r\n\r\n  handleMultisetPlot = multisetPlotResults => {\r\n    this.setState({\r\n      multisetPlotInfoEnrichment: {\r\n        title: multisetPlotResults.svgInfo.plotType,\r\n        svg: multisetPlotResults.svgInfo.svg,\r\n      },\r\n      multisetPlotAvailableEnrichment: true,\r\n    });\r\n  };\r\n\r\n  getConfigCols = annotationData => {\r\n    const enrResults = annotationData;\r\n    const {\r\n      enrichmentStudy,\r\n      enrichmentModel,\r\n      enrichmentAnnotation,\r\n    } = this.props;\r\n    const { hasBarcodeData, enrichmentsLinkouts } = this.state;\r\n    const TableValuePopupStyle = {\r\n      backgroundColor: '2E2E2E',\r\n      borderBottom: '2px solid var(--color-primary)',\r\n      color: '#FFF',\r\n      padding: '1em',\r\n      maxWidth: '50vw',\r\n      fontSize: '13px',\r\n      wordBreak: 'break-all',\r\n    };\r\n    let enrichmentAlphanumericFields = [];\r\n    let enrichmentNumericFields = [];\r\n    const firstObject = enrResults[0];\r\n    for (let [key, value] of Object.entries(firstObject)) {\r\n      if (typeof value === 'string' || value instanceof String) {\r\n        enrichmentAlphanumericFields.push(key);\r\n      } else {\r\n        enrichmentNumericFields.push(key);\r\n      }\r\n    }\r\n    const alphanumericTrigger = enrichmentAlphanumericFields[0];\r\n    this.setState({ enrichmentFeatureIdKey: alphanumericTrigger });\r\n    const enrichmentAlphanumericColumnsMapped = enrichmentAlphanumericFields.map(\r\n      f => {\r\n        return {\r\n          title: f,\r\n          field: f,\r\n          filterable: { type: 'multiFilter' },\r\n          template: (value, item, addParams) => {\r\n            if (f === alphanumericTrigger) {\r\n              let linkoutWithIcon = null;\r\n              if (enrichmentsLinkouts.length > 0) {\r\n                const linkoutsIsArray = Array.isArray(enrichmentsLinkouts);\r\n                const linkouts = linkoutsIsArray\r\n                  ? enrichmentsLinkouts\r\n                  : [enrichmentsLinkouts];\r\n                const itemValue = item[f];\r\n                linkoutWithIcon = getLinkout(\r\n                  itemValue,\r\n                  linkouts,\r\n                  TableValuePopupStyle,\r\n                );\r\n              }\r\n              return (\r\n                <div>\r\n                  <Popup\r\n                    trigger={\r\n                      <span className=\"TableValue\">{splitValue(value)}</span>\r\n                    }\r\n                    style={TableValuePopupStyle}\r\n                    className=\"TablePopupValue\"\r\n                    content={value}\r\n                    inverted\r\n                    basic\r\n                  />\r\n                  {linkoutWithIcon}\r\n                </div>\r\n              );\r\n            } else {\r\n              return (\r\n                <div>\r\n                  <Popup\r\n                    trigger={\r\n                      <span className=\"TableValue\">{splitValue(value)}</span>\r\n                    }\r\n                    style={TableValuePopupStyle}\r\n                    className=\"TablePopupValue\"\r\n                    content={value}\r\n                    inverted\r\n                    basic\r\n                  />\r\n                </div>\r\n              );\r\n            }\r\n          },\r\n        };\r\n      },\r\n    );\r\n\r\n    // multiset svg rebuilds based on uData...if there are no results we need to override this from being passed down\r\n    if (enrichmentNumericFields.length !== 0) {\r\n      this.setState({\r\n        uData: enrichmentNumericFields,\r\n      });\r\n    }\r\n    const enrichmentNumericColumnsMapped = enrichmentNumericFields.map(c => {\r\n      return {\r\n        title: c,\r\n        field: c,\r\n        type: 'number',\r\n        filterable: { type: 'numericFilter' },\r\n        exportTemplate: value => (value ? `${value}` : 'N/A'),\r\n        template: (value, item, addParams) => {\r\n          return (\r\n            <div>\r\n              <Popup\r\n                trigger={\r\n                  <span\r\n                    className={hasBarcodeData ? 'TableCellLink' : ''}\r\n                    onClick={\r\n                      hasBarcodeData\r\n                        ? addParams.barcodeData(\r\n                            enrichmentStudy,\r\n                            enrichmentModel,\r\n                            enrichmentAnnotation,\r\n                            item,\r\n                            c,\r\n                          )\r\n                        : {}\r\n                    }\r\n                  >\r\n                    {formatNumberForDisplay(value)}\r\n                  </span>\r\n                }\r\n                style={TableValuePopupStyle}\r\n                className=\"TablePopupValue\"\r\n                content={value}\r\n                inverted\r\n                basic\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      };\r\n    });\r\n\r\n    const configCols = enrichmentAlphanumericColumnsMapped.concat(\r\n      enrichmentNumericColumnsMapped,\r\n    );\r\n    return configCols;\r\n  };\r\n\r\n  removeNetworkSVG = () => {\r\n    d3.select('div.tooltip-pieSlice').remove();\r\n    d3.select('tooltipLink').remove();\r\n    d3.select(`#svg-${this.state.networkSettings.id}`).remove();\r\n  };\r\n\r\n  handleCancelRequestGetEnrichmentsNetwork = () => {\r\n    cancelRequestGetEnrichmentsNetwork();\r\n  };\r\n\r\n  getNetworkData = (enrichmentResults, annotation) => {\r\n    const {\r\n      enrichmentStudy,\r\n      enrichmentModel,\r\n      // enrichmentAnnotation,\r\n      // pValueType,\r\n    } = this.props;\r\n    const cacheKey = `getEnrichmentsNetwork_${enrichmentStudy}_${enrichmentModel}_${annotation}`;\r\n    if (cacheGetEnrichmentsNetwork[cacheKey] != null) {\r\n      this.handleEnrichmentNetworkData(\r\n        cacheGetEnrichmentsNetwork[cacheKey],\r\n        enrichmentResults,\r\n      );\r\n    } else {\r\n      cancelRequestGetEnrichmentsNetwork();\r\n      let cancelToken = new CancelToken(e => {\r\n        cancelRequestGetEnrichmentsNetwork = e;\r\n      });\r\n      omicNavigatorService\r\n        .getEnrichmentsNetwork(\r\n          enrichmentStudy,\r\n          enrichmentModel,\r\n          annotation,\r\n          this.handleGetEnrichmentNetworkError,\r\n          cancelToken,\r\n        )\r\n        .then(getEnrichmentNetworkResponseData => {\r\n          cacheGetEnrichmentsNetwork[\r\n            cacheKey\r\n          ] = getEnrichmentNetworkResponseData;\r\n          if (\r\n            getEnrichmentNetworkResponseData.nodes?.length > 0 ||\r\n            getEnrichmentNetworkResponseData.links?.length > 0 ||\r\n            getEnrichmentNetworkResponseData.tests?.length > 0\r\n          ) {\r\n            this.setState(\r\n              {\r\n                unfilteredNetworkData: getEnrichmentNetworkResponseData,\r\n              },\r\n              this.handleEnrichmentNetworkData(\r\n                getEnrichmentNetworkResponseData,\r\n                enrichmentResults,\r\n              ),\r\n            );\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during getEnrichmentNetwork', error);\r\n          //   this.handleGetEnrichmentNetworkError();\r\n        });\r\n    }\r\n    // const fetchParams = {\r\n    //   study: enrichmentStudy,\r\n    //   modelID: enrichmentModel,\r\n    //   annotationID: enrichmentAnnotation,\r\n    // };\r\n    // fetch(fetchUrlEnrichmentsNetwork, {\r\n    //   method: 'POST',\r\n    //   headers: {\r\n    //     'Content-Type': 'application/json',\r\n    //   },\r\n    //   body: JSON.stringify(fetchParams), // body data type must match \"Content-Type\" header\r\n    // })\r\n    //   // can nd-json-stream - assumes json is NDJSON, a data format that is separated into individual JSON objects with a newline character (\\n). The 'nd' stands for newline delimited JSON\r\n    //   .then(response => {\r\n    //     return ndjsonStream(response.body); //ndjsonStream parses the response.body\r\n    //   })\r\n    //   .then(canNdJsonStream => {\r\n    //     this.handleGetEnrichmentsNetworkStream(\r\n    //       canNdJsonStream,\r\n    //       enrichmentResults,\r\n    //     );\r\n    //   })\r\n    //   .catch(error => {\r\n    //     console.error('Error during getEnrichmentsNetwork', error);\r\n    //   this.handleGetEnrichmentNetworkError();\r\n    //   });\r\n  };\r\n\r\n  // /**\r\n  //  * @param stream {ReadableStream<any>}\r\n  //  */\r\n  // handleGetEnrichmentsNetworkStream = async (stream, enrichmentResults) => {\r\n  //   // console.log({ stream });\r\n  //   // console.log({ enrichmentResults });\r\n  //   this.reader?.cancel();\r\n  //   const {\r\n  //     enrichmentStudy,\r\n  //     enrichmentModel,\r\n  //     enrichmentAnnotation,\r\n  //   } = this.props;\r\n  //   const cacheKey = `getEnrichmentsNetwork_${enrichmentStudy}_${enrichmentModel}_${enrichmentAnnotation}`;\r\n  //   let streamedResults = [];\r\n  //   try {\r\n  //     this.reader = stream.getReader();\r\n  //     for await (let value of streamAsyncIterable(this.reader)) {\r\n  //       streamedResults.push(value);\r\n  //       if (\r\n  //         streamedResults.length === 100 ||\r\n  //         streamedResults.length % 2500 === 0\r\n  //       ) {\r\n  //         const streamedResultsCopy = streamedResults.slice();\r\n  //         // this.setState(\r\n  //         //   {\r\n  //         //     unfilteredNetworkData: streamedResultsCopy,\r\n  //         //   },\r\n  //         //   function() {\r\n  //         this.handleEnrichmentNetworkData(\r\n  //           streamedResultsCopy,\r\n  //           enrichmentResults,\r\n  //         );\r\n  //         // },\r\n  //         // );\r\n  //       }\r\n  //     }\r\n  //     // Stream finished at this point\r\n  //     const streamedResultsFinishedCopy = streamedResults.slice();\r\n  //     cacheEnrichmentsNetwork[cacheKey] = streamedResultsFinishedCopy;\r\n  //     // this.setState(\r\n  //     //   {\r\n  //     //     unfilteredNetworkData: streamedResultsFinishedCopy,\r\n  //     //   },\r\n  //     //   function() {\r\n  //     this.handleEnrichmentNetworkData(\r\n  //       streamedResultsFinishedCopy,\r\n  //       enrichmentResults,\r\n  //     );\r\n  //     //   },\r\n  //     // );\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //     // Ignore?\r\n  //   }\r\n  // };\r\n\r\n  handleEnrichmentNetworkData = (unfilteredNetworkData, enrichmentResults) => {\r\n    const { multisetTestsFilteredOut } = this.state;\r\n    // const pValueTypeParam = pValueType === 'adjusted' ? 0.1 : 1;\r\n    let networkDataVar = { ...unfilteredNetworkData };\r\n    var tests = unfilteredNetworkData.tests;\r\n    const enrichmentResultsDescriptions = [...enrichmentResults].map(\r\n      r => r.description,\r\n    );\r\n    if (\r\n      unfilteredNetworkData.nodes?.length > 0 ||\r\n      unfilteredNetworkData.links?.length > 0 ||\r\n      unfilteredNetworkData.tests?.length > 0\r\n    ) {\r\n      const filteredNodes = unfilteredNetworkData.nodes.filter(n =>\r\n        enrichmentResultsDescriptions.includes(n.description),\r\n      );\r\n      networkDataVar.nodes = filteredNodes;\r\n      this.setState({\r\n        // unfilteredNetworkData: unfilteredNetworkData,\r\n        networkData: networkDataVar,\r\n        tests: tests,\r\n        totalNodes: unfilteredNetworkData.nodes.length,\r\n        totalLinks: unfilteredNetworkData.links.length,\r\n      });\r\n      let testsAfterFilter = unfilteredNetworkData.tests;\r\n      if (multisetTestsFilteredOut.length > 0) {\r\n        let isArrayBeforeFilter = Array.isArray(testsAfterFilter);\r\n        if (isArrayBeforeFilter) {\r\n          testsAfterFilter = testsAfterFilter.filter(function(col) {\r\n            return !multisetTestsFilteredOut.includes(col);\r\n          });\r\n        } else {\r\n          testsAfterFilter = [];\r\n        }\r\n      }\r\n      let facets = [];\r\n      let pieData = [];\r\n      const isArrayAfterFilter = Array.isArray(testsAfterFilter);\r\n      const testsLengthAfterFilter =\r\n        typeof testsAfterFilter === 'string' ? 1 : testsAfterFilter.length;\r\n      if (isArrayAfterFilter && testsLengthAfterFilter > 0) {\r\n        for (var i = 0; i < testsLengthAfterFilter; i++) {\r\n          // let rplcSpaces = testsAfterFilter[i].replace(/ /g, '_');\r\n          // facets.push('EnrichmentMap_pvalue_' + rplcSpaces + '_');\r\n          facets.push(testsAfterFilter[i]);\r\n          pieData.push(100 / testsLengthAfterFilter);\r\n        }\r\n      } else {\r\n        if (testsAfterFilter.length > 0) {\r\n          facets.push(testsAfterFilter);\r\n          pieData.push(testsAfterFilter);\r\n        }\r\n      }\r\n      this.setState({\r\n        networkSettings: {\r\n          ...this.state.networkSettings,\r\n          facets: facets,\r\n          propLabel: testsAfterFilter,\r\n          propData: pieData,\r\n        },\r\n        networkDataLoaded: true,\r\n        networkGraphReady: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleNetworkGraphReady = bool => {\r\n    this.setState({\r\n      networkGraphReady: bool,\r\n    });\r\n  };\r\n\r\n  handleGetEnrichmentNetworkError = () => {\r\n    this.setState({\r\n      networkSettings: {\r\n        ...this.state.networkSettings,\r\n        facets: [],\r\n        propLabel: [],\r\n        propData: [],\r\n      },\r\n      networkDataError: true,\r\n      activeIndexEnrichmentView: 0,\r\n    });\r\n  };\r\n\r\n  calculateHeight = () => {\r\n    let containerHeight =\r\n      this.EnrichmentViewContainerRef.current !== null\r\n        ? this.EnrichmentViewContainerRef.current.parentElement.offsetHeight\r\n        : 900;\r\n    let barcodeHeight =\r\n      parseInt(localStorage.getItem('horizontalSplitPaneSize'), 10) || 250;\r\n    // subtracting 120 due to menu and plot margin\r\n    return containerHeight - barcodeHeight - 120;\r\n  };\r\n\r\n  calculateWidth = () => {\r\n    let containerWidth =\r\n      this.EnrichmentViewContainerRef.current !== null\r\n        ? this.EnrichmentViewContainerRef.current.parentElement.offsetWidth\r\n        : 1200;\r\n    let violinWidth =\r\n      parseInt(localStorage.getItem('verticalSplitPaneSize'), 10) || 525;\r\n    // subtracting 60 due to plot margin\r\n    return containerWidth - violinWidth - 60;\r\n  };\r\n\r\n  showBarcodePlot = (barcodeData, dataItem) => {\r\n    // sorting by statistic is being handled by backend\r\n    // const barcodeDataSorted = barcodeData.data.sort(\r\n    //   (a, b) => b.statistic - a.statistic,\r\n    // );\r\n    this.setState({\r\n      isTestDataLoaded: true,\r\n      barcodeSettings: {\r\n        ...this.state.barcodeSettings,\r\n        barcodeData: barcodeData.data,\r\n        statLabel: barcodeData.labelStat,\r\n        highLabel: barcodeData.labelHigh,\r\n        lowLabel: barcodeData.labelLow,\r\n        highStat: barcodeData.highest,\r\n        enableBrush: true,\r\n      },\r\n    });\r\n  };\r\n\r\n  handleBarcodeChanges = changes => {\r\n    let self = this;\r\n    if (changes.brushedData.length > 0) {\r\n      const boxPlotArray = _.map(changes.brushedData, function(d) {\r\n        d.statistic = _.find(self.state.barcodeSettings.barcodeData, {\r\n          featureID: d.featureID,\r\n        }).statistic;\r\n        d.logFC = _.find(self.state.barcodeSettings.barcodeData, {\r\n          featureID: d.featureID,\r\n        }).logFoldChange;\r\n        return d;\r\n      });\r\n      const reducedBoxPlotArray = _.reduce(\r\n        boxPlotArray,\r\n        function(res, datum) {\r\n          // (res[datum.statLabel] || (res[datum.statLabel] = [])).push({\r\n          (\r\n            res[self.state.barcodeSettings.statLabel] ||\r\n            (res[self.state.barcodeSettings.statLabel] = [])\r\n          ).push({\r\n            cpm: datum.logFC,\r\n            sample: datum.lineID,\r\n            statistic: datum.statistic,\r\n            featureID: datum.featureID,\r\n          });\r\n          return res;\r\n        },\r\n        {},\r\n      );\r\n\r\n      const vData = _.mapValues(reducedBoxPlotArray, function(v) {\r\n        return { values: v };\r\n      });\r\n      const ordered = {};\r\n      Object.keys(vData)\r\n        .sort()\r\n        .forEach(function(key) {\r\n          ordered[key] = vData[key];\r\n        });\r\n\r\n      this.setState({\r\n        violinData: ordered,\r\n        isViolinPlotLoaded: true,\r\n        barcodeSettings: {\r\n          ...this.state.barcodeSettings,\r\n          brushedData: changes.brushedData,\r\n        },\r\n      });\r\n    } else {\r\n      this.setState({\r\n        violinData: [],\r\n        isViolinPlotLoaded: false,\r\n        barcodeSettings: {\r\n          ...this.state.barcodeSettings,\r\n          brushedData: [],\r\n        },\r\n        SVGPlotLoaded: false,\r\n        SVGPlotLoading: false,\r\n        // imageInfo: {\r\n        //   key: null,\r\n        //   title: '',\r\n        //   svg: []\r\n        // }\r\n      });\r\n    }\r\n  };\r\n\r\n  handleHighlightedLineReset = emptyArr => {\r\n    this.setState(emptyArr);\r\n  };\r\n\r\n  // handleFilteredDifferentialFeatureIdKey = (name, id) => {\r\n  //   this.setState({\r\n  //     [name]: id,\r\n  //   });\r\n  // };\r\n\r\n  handleProteinSelected = toHighlightArray => {\r\n    const prevHighestValueObject = this.state.HighlightedProteins[0]?.featureID;\r\n    const highestValueObject = toHighlightArray[0];\r\n    if (\r\n      this.state.barcodeSettings.barcodeData?.length > 0 &&\r\n      toHighlightArray.length > 0\r\n    ) {\r\n      this.setState({\r\n        HighlightedProteins: toHighlightArray,\r\n      });\r\n      if (\r\n        highestValueObject?.featureID !== prevHighestValueObject ||\r\n        this.state.SVGPlotLoaded === false\r\n      ) {\r\n        this.setState({\r\n          SVGPlotLoaded: false,\r\n          SVGPlotLoading: true,\r\n        });\r\n        const dataItem = this.state.barcodeSettings.barcodeData.find(\r\n          i => i.featureID === highestValueObject?.featureID,\r\n        );\r\n        let id = dataItem.featureID || '';\r\n        this.getPlot(id);\r\n      }\r\n    } else {\r\n      cancelRequestEnrichmentGetPlot();\r\n      this.setState({\r\n        SVGPlotLoaded: false,\r\n        SVGPlotLoading: false,\r\n        HighlightedProteins: [],\r\n        // imageInfo: {\r\n        //   ...this.state.imageInfo,\r\n        //   svg: []\r\n        // },\r\n      });\r\n    }\r\n  };\r\n\r\n  getPlot = featureId => {\r\n    const { enrichmentPlotTypes } = this.state;\r\n    const { enrichmentStudy, enrichmentModel } = this.props;\r\n    let id = featureId != null ? featureId : '';\r\n    let imageInfo = { key: '', title: '', svg: [] };\r\n    imageInfo.title = this.state.imageInfo.title;\r\n    imageInfo.key = this.state.imageInfo.key;\r\n    this.setState({ svgExportName: id });\r\n    let handleSVGCb = this.handleSVG;\r\n    let handlePlotStudyError = this.handlePlotStudyError;\r\n    let currentSVGs = [];\r\n    cancelRequestEnrichmentGetPlot();\r\n    let cancelToken = new CancelToken(e => {\r\n      cancelRequestEnrichmentGetPlot = e;\r\n    });\r\n    if (enrichmentPlotTypes.length > 0) {\r\n      _.forEach(enrichmentPlotTypes, function(plot, i) {\r\n        omicNavigatorService\r\n          .plotStudy(\r\n            enrichmentStudy,\r\n            enrichmentModel,\r\n            id,\r\n            enrichmentPlotTypes[i].plotID,\r\n            handlePlotStudyError,\r\n            cancelToken,\r\n          )\r\n          .then(svgMarkupObj => {\r\n            let svgMarkup = svgMarkupObj.data;\r\n            if (svgMarkup != null || svgMarkup !== []) {\r\n              svgMarkup = svgMarkup.replace(\r\n                /id=\"/g,\r\n                'id=\"' + id + '-' + i + '-',\r\n              );\r\n              svgMarkup = svgMarkup.replace(\r\n                /#glyph/g,\r\n                '#' + id + '-' + i + '-glyph',\r\n              );\r\n              svgMarkup = svgMarkup.replace(\r\n                /#clip/g,\r\n                '#' + id + '-' + i + '-clip',\r\n              );\r\n              svgMarkup = svgMarkup.replace(\r\n                /<svg/g,\r\n                `<svg preserveAspectRatio=\"xMinYMin meet\" id=\"currentSVG-${id}-${i}\"`,\r\n              );\r\n              DOMPurify.addHook('afterSanitizeAttributes', function(node) {\r\n                if (\r\n                  node.hasAttribute('xlink:href') &&\r\n                  !node.getAttribute('xlink:href').match(/^#/)\r\n                ) {\r\n                  node.remove();\r\n                }\r\n              });\r\n              // Clean HTML string and write into our DIV\r\n              let sanitizedSVG = DOMPurify.sanitize(svgMarkup, {\r\n                ADD_TAGS: ['use'],\r\n              });\r\n              let svgInfo = {\r\n                plotType: enrichmentPlotTypes[i],\r\n                svg: sanitizedSVG,\r\n              };\r\n\r\n              // we want spline plot in zero index, rather than lineplot\r\n              // if (i === 0) {\r\n              imageInfo.svg.push(svgInfo);\r\n              currentSVGs.push(sanitizedSVG);\r\n              // } else {\r\n              //   imageInfo.svg.unshift(svgInfo);\r\n              //   currentSVGs.unshift(sanitizedSVG);\r\n              // }\r\n              handleSVGCb(imageInfo);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error during getPlot', error);\r\n          });\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEnrichmentSVGSizeChange = id => {\r\n    // keep whatever dimension is less (height or width)\r\n    // then multiply the other dimension by original svg ratio (height 595px, width 841px)\r\n    let EnrichmentPlotSVGHeight = this.calculateHeight();\r\n    let EnrichmentPlotSVGWidth = this.calculateWidth();\r\n    // EnrichmentPlotSVGHeight = EnrichmentPlotSVGWidth * 0.70749;\r\n    if (EnrichmentPlotSVGHeight + 60 > EnrichmentPlotSVGWidth) {\r\n      EnrichmentPlotSVGHeight = EnrichmentPlotSVGWidth * 0.70749;\r\n    } else {\r\n      EnrichmentPlotSVGWidth = EnrichmentPlotSVGHeight * 1.41344;\r\n    }\r\n    this.setState(\r\n      {\r\n        SVGPlotLoaded: true,\r\n        SVGPlotLoading: false,\r\n        enrichmentPlotSVGHeight: EnrichmentPlotSVGHeight,\r\n        enrichmentPlotSVGWidth: EnrichmentPlotSVGWidth,\r\n      },\r\n      function() {\r\n        this.getPlot(id);\r\n      },\r\n    );\r\n  };\r\n\r\n  handleSVG = imageInfo => {\r\n    this.setState({\r\n      imageInfo: imageInfo,\r\n      SVGPlotLoaded: true,\r\n      SVGPlotLoading: false,\r\n    });\r\n  };\r\n\r\n  handlePlotStudyError = () => {\r\n    this.setState({\r\n      SVGPlotLoaded: false,\r\n      SVGPlotLoading: false,\r\n      // imageInfo: {\r\n      //   ...this.state.imageInfo,\r\n      //   svg: []\r\n      // },\r\n    });\r\n  };\r\n\r\n  handleGetBarcodeDataError = () => {\r\n    this.testSelectedTransition(false);\r\n    this.handleSearchCriteriaChangeEnrichment(\r\n      {\r\n        enrichmentStudy: this.props.enrichmentStudy || '',\r\n        enrichmentModel: this.props.enrichmentModel || '',\r\n        enrichmentAnnotation: this.props.enrichmentAnnotation || '',\r\n        enrichmentTestAndDescription: '',\r\n      },\r\n      false,\r\n    );\r\n  };\r\n\r\n  testSelected = (\r\n    enrichmentStudy,\r\n    enrichmentModel,\r\n    enrichmentAnnotation,\r\n    dataItem,\r\n    test,\r\n  ) => {\r\n    this.testSelectedTransition(true);\r\n    const TestSiteVar = `${test}:${dataItem.description}`;\r\n    this.handleSearchCriteriaChangeEnrichment(\r\n      {\r\n        enrichmentStudy: this.props.enrichmentStudy || '',\r\n        enrichmentModel: this.props.enrichmentModel || '',\r\n        enrichmentAnnotation: this.props.enrichmentAnnotation || '',\r\n        enrichmentTestAndDescription: TestSiteVar || '',\r\n      },\r\n      true,\r\n    );\r\n    let term = dataItem.termID;\r\n    this.setState({\r\n      imageInfo: {\r\n        ...this.state.imageInfo,\r\n        key: `${test}:${dataItem.description}`,\r\n        title: `${test}:${dataItem.description}`,\r\n        dataItem: dataItem,\r\n      },\r\n      enrichmentNameLoaded: true,\r\n      enrichmentDataItem: dataItem,\r\n      enrichmentTerm: term,\r\n    });\r\n    omicNavigatorService\r\n      .getBarcodeData(\r\n        enrichmentStudy,\r\n        enrichmentModel,\r\n        test,\r\n        enrichmentAnnotation,\r\n        term,\r\n        this.handleGetBarcodeDataError,\r\n      )\r\n      .then(barcodeDataResponse => {\r\n        if (barcodeDataResponse?.data?.length > 0) {\r\n          const logFoldChangeArr = barcodeDataResponse.data.map(\r\n            b => b.logFoldChange,\r\n          );\r\n          const isZero = logFoldChangeVal => logFoldChangeVal === 0;\r\n          if (logFoldChangeArr.every(isZero)) {\r\n            this.setState({\r\n              displayViolinPlot: false,\r\n            });\r\n          } else {\r\n            this.setState({\r\n              displayViolinPlot: true,\r\n            });\r\n          }\r\n          this.showBarcodePlot(barcodeDataResponse, dataItem);\r\n        } else {\r\n          this.handleGetBarcodeDataError();\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during getBarcodeData', error);\r\n      });\r\n  };\r\n\r\n  getTableHelpers = () => {\r\n    let addParams = {};\r\n    addParams.barcodeData = (\r\n      enrichmentStudy,\r\n      enrichmentModel,\r\n      enrichmentAnnotation,\r\n      dataItem,\r\n      test,\r\n    ) => {\r\n      let self = this;\r\n      return function() {\r\n        self.testSelected(\r\n          enrichmentStudy,\r\n          enrichmentModel,\r\n          enrichmentAnnotation,\r\n          dataItem,\r\n          test,\r\n        );\r\n        //stored annodationdata and won't call the service after the first time...reset it when sc changes\r\n        // } else {\r\n        //   dataItem.Annotation = _.find(self.state.annotationData, {\r\n        //     Description: dataItem.description\r\n        //   }).Key;\r\n        //   let term = dataItem.Annotation;\r\n\r\n        //   self.setState({\r\n        //     imageInfo: {\r\n        //       ...self.state.imageInfo,\r\n        //       key: `${test} : ${dataItem.description}`,\r\n        //       title: `${test} : ${dataItem.description}`\r\n        //     },\r\n        //     enrichmentNameLoaded: true,\r\n        //     enrichmentDataItem: dataItem,\r\n        //     enrichmentTerm: term\r\n        //   });\r\n\r\n        //   omicNavigatorService\r\n        //     .getBarcodeData(\r\n        //       enrichmentStudy + 'plots',\r\n        //       enrichmentModel,\r\n        //       enrichmentAnnotation,\r\n        //       test,\r\n        //       dataItem.Annotation\r\n        //     )\r\n        //     .then(barcodeDataResponse => {\r\n        //       let BardcodeInfoObj = JSON.parse(barcodeDataResponse['object']);\r\n        //       let highest = barcodeDataResponse['highest'][0];\r\n        //       // if (!this.state.modelsToRenderViolin.includes(this.enrichmentModel)){\r\n        //       //   this.setState({ sizeVal = '0%' )};\r\n        //       // } else {\r\n        //       //   this.setState({ sizeVal = '50%')};\r\n        //       // }\r\n\r\n        //       showBarcodePlotCb(barcodeDataResponse);\r\n        //     });\r\n        // }\r\n      };\r\n    };\r\n    this.setState({\r\n      additionalTemplateInfoEnrichmentTable: addParams,\r\n    });\r\n  };\r\n\r\n  handleLegendOpen = () => {\r\n    this.setState({ legendIsOpen: true }, () => this.createLegend());\r\n  };\r\n\r\n  handleLegendClose = () => {\r\n    this.setState({ legendIsOpen: false });\r\n  };\r\n\r\n  createLegend = () => {\r\n    const self = this;\r\n    const singleTest = typeof this.state.networkSettings.propLabel === 'string';\r\n    var svg = d3\r\n      .selectAll('.legend')\r\n      .append('svg')\r\n      .data([this.state.networkSettings.propLabel])\r\n      .attr('width', '100%')\r\n      .attr('height', '100%')\r\n      .attr('viewBox', '0 0 300 250')\r\n      .attr('preserveAspectRatio', 'xMinYMin meet');\r\n\r\n    var legend = svg.append('g');\r\n    legend.append('g').attr('class', 'slices');\r\n    legend.append('g').attr('class', 'labels');\r\n    legend.append('g').attr('class', 'lines');\r\n    legend.append('g').attr('class', 'gradient');\r\n    legend.append('g').attr('class', 'mostSignificant');\r\n\r\n    var width = 300,\r\n      height = 300,\r\n      radius = 50;\r\n\r\n    let pie = d3\r\n      .pie()\r\n      .sort(null)\r\n      .value(1);\r\n    let arc = d3\r\n      .arc()\r\n      .outerRadius(radius)\r\n      .innerRadius(0);\r\n\r\n    if (singleTest) {\r\n      arc = d3\r\n        .arc()\r\n        .innerRadius(0)\r\n        .outerRadius(90)\r\n        .startAngle(0)\r\n        .endAngle(2 * Math.PI);\r\n    }\r\n\r\n    legend.attr('transform', 'translate(' + width / 2 + ',' + height / 3 + ')');\r\n\r\n    /* ------- PIE SLICES -------*/\r\n    var slice = legend\r\n      .select('.slices')\r\n      .selectAll('path.slice')\r\n      .data(pie);\r\n\r\n    slice\r\n      .enter()\r\n      .insert('path')\r\n      .style('fill', '#d3d3d3')\r\n      .attr('class', 'slice')\r\n      .attr('stroke', 'black')\r\n      .attr('d', arc);\r\n\r\n    /* ------- TEXT LABELS -------*/\r\n    var text = legend\r\n      .select('.labels')\r\n      .selectAll('text')\r\n      .data(pie);\r\n    if (!singleTest) {\r\n      text\r\n        .enter()\r\n        .append('text')\r\n        .attr('font-family', 'Lato,Arial,Helvetica,sans-serif')\r\n        .attr('dy', '.35em')\r\n        // .attr('transform', 'rotate(' + 10 + ')')\r\n        .style('font-size', '.8em')\r\n        .text(function(d) {\r\n          return d.data;\r\n        })\r\n        .attr('x', function(d) {\r\n          var a = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;\r\n          d.cx = Math.cos(a) * (radius - 10);\r\n          return (d.x = Math.cos(a) * (radius + 30));\r\n        })\r\n        .attr('y', function(d) {\r\n          var a = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;\r\n          d.cy = Math.sin(a) * (radius - 10);\r\n          return (d.y = Math.sin(a) * (radius + 30));\r\n        })\r\n        .style('text-anchor', 'middle')\r\n        .each(function(d) {\r\n          var bbox = this.getBBox();\r\n          d.sx = d.x - bbox.width / 2 - 2;\r\n          d.ox = d.x + bbox.width / 2 + 2;\r\n          d.sy = d.oy = d.y + 5;\r\n        });\r\n\r\n      text\r\n        .enter()\r\n        .append('path')\r\n        .attr('class', 'pointer')\r\n        .style('fill', 'none')\r\n        .style('stroke', 'black')\r\n\r\n        .attr('d', function(d) {\r\n          if (d.cx > d.ox) {\r\n            return (\r\n              'M' +\r\n              d.sx +\r\n              ',' +\r\n              d.sy +\r\n              'L' +\r\n              d.ox +\r\n              ',' +\r\n              d.oy +\r\n              ' ' +\r\n              d.cx +\r\n              ',' +\r\n              d.cy\r\n            );\r\n          } else {\r\n            return (\r\n              'M' +\r\n              d.ox +\r\n              ',' +\r\n              d.oy +\r\n              'L' +\r\n              d.sx +\r\n              ',' +\r\n              d.sy +\r\n              ' ' +\r\n              d.cx +\r\n              ',' +\r\n              d.cy\r\n            );\r\n          }\r\n        });\r\n    }\r\n\r\n    if (singleTest) {\r\n      text\r\n        .enter()\r\n        .append('text')\r\n        .attr('font-family', 'Lato,Arial,Helvetica,sans-serif')\r\n        .attr('dy', '.35em')\r\n        // .attr('transform', 'rotate(' + 10 + ')')\r\n        .style('font-size', '.8em')\r\n        .text(function(d) {\r\n          return d.data;\r\n        });\r\n      text\r\n        .enter()\r\n        .append('path')\r\n        .attr('class', 'pointer')\r\n        .style('fill', 'none')\r\n        .style('stroke', 'black');\r\n    }\r\n\r\n    // Create the svg:defs element and the main gradient definition.\r\n    var svgDefs = svg.append('defs');\r\n\r\n    var mainGradient = svgDefs\r\n      .append('linearGradient')\r\n      .attr('id', 'mainGradient');\r\n\r\n    // Create the stops of the main gradient. Each stop will be assigned\r\n    // a class to style the stop using CSS.\r\n    mainGradient\r\n      .append('stop')\r\n      .attr('class', 'stop-left')\r\n      .attr('offset', '0');\r\n\r\n    mainGradient\r\n      .append('stop')\r\n      .attr('class', 'stop-middle')\r\n      .attr('offset', '0.5');\r\n\r\n    mainGradient\r\n      .append('stop')\r\n      .attr('class', 'stop-right')\r\n      .attr('offset', '1');\r\n\r\n    // Use the gradient to set the shape fill, via CSS.\r\n    var gradient = legend.selectAll('.gradient');\r\n\r\n    gradient\r\n      .append('rect')\r\n      .classed('filled', true)\r\n      .attr('x', -50)\r\n      .attr('y', this.state.networkSettings.propLabel.length > 2 ? 100 : 60)\r\n      .attr('width', 100)\r\n      .attr('height', 15);\r\n\r\n    var y = d3\r\n      .scaleLinear()\r\n      .range([0, 50, 100])\r\n      .domain([0, 0.1, 1]);\r\n\r\n    var yAxis = d3\r\n      .axisBottom()\r\n      .scale(y)\r\n      .ticks(2);\r\n\r\n    gradient\r\n      .append('g')\r\n      .attr('class', 'y axis')\r\n      .attr('transform', 'translate(-50,115)')\r\n      .call(yAxis);\r\n    gradient\r\n      .append('text')\r\n      .attr('font-family', 'Lato,Arial,Helvetica,sans-serif')\r\n      .attr('x', -10)\r\n      .attr('y', 2)\r\n      .attr('dy', '.35em')\r\n      .text('pValue')\r\n      .attr('transform', 'translate(-85,105)');\r\n\r\n    //most  color scale\r\n    var mostSignificantColorScale = d3\r\n      .scaleLinear()\r\n      .range(self.state.networkSettings.mostSignificantColorScale);\r\n    //Append a linearGradient element to the defs and give it a unique id\r\n    var mostSignificantGradient = svgDefs\r\n      .append('linearGradient')\r\n      .attr('id', 'most-significant-linear-gradient')\r\n      // DIAGONAL GRADIENT\r\n      .attr('x1', '70%')\r\n      .attr('y1', '70%')\r\n      .attr('x2', '30%')\r\n      .attr('y2', '30%');\r\n\r\n    //Append multiple color stops by using D3's data/enter step\r\n    mostSignificantGradient\r\n      .selectAll('stop')\r\n      .data(mostSignificantColorScale.range())\r\n      .enter()\r\n      .append('stop')\r\n      .attr('offset', function(d, i) {\r\n        return i / (mostSignificantColorScale.range().length - 1);\r\n      })\r\n      .attr('stop-color', function(d) {\r\n        return d;\r\n      });\r\n\r\n    const mostSignificant = legend.selectAll('.mostSignificant');\r\n\r\n    mostSignificant\r\n      .append('text')\r\n      .attr('font-family', 'Lato,Arial,Helvetica,sans-serif')\r\n      .attr('x', -120)\r\n      .attr('y', 150)\r\n      .attr('dy', '.35em')\r\n      .text('Most significant of all tests in chart');\r\n\r\n    // SQUARE\r\n    mostSignificant\r\n      .append('rect')\r\n      .attr('x', 100)\r\n      .attr('y', 141)\r\n      .attr('width', 20)\r\n      .attr('height', 20)\r\n      .style('stroke', '#000')\r\n      .style('fill', 'url(#most-significant-linear-gradient)');\r\n\r\n    // CIRCLE\r\n    // mostSignificant\r\n    //   .append('circle')\r\n    //   .attr('r', 10)\r\n    //   .attr('cx', 110)\r\n    //   .attr('cy', 151)\r\n    //   .style('stroke', 'black')\r\n    //   .style('fill', 'ffd700')\r\n    //   .style('stroke-width', '1')\r\n    //   .style('stroke', 'black');\r\n\r\n    // SLICE\r\n    // mostSignificant\r\n    //   .append('circle')\r\n    //   .attr('r', 5)\r\n    //   .attr('cx', 100)\r\n    //   .attr('cy', 151)\r\n    //   .style('fill', 'transparent')\r\n    //   .style('stroke', 'ffd700')\r\n    //   .style('stroke-width', '20')\r\n    //   .style('stroke-dasharray', 'calc(35 * 31.42 / 140) 31.42')\r\n  };\r\n\r\n  // getLegend = () => {\r\n  //   let tests = this.state.networkSettings.propLabel;\r\n  //   // let pieSlices = tests.length;\r\n  //   let labels = {};\r\n  //   let lines = {};\r\n  //   let gradient = {};\r\n  //   let width = 300;\r\n  //   let height = 300;\r\n  //   let x = width / 2;\r\n  //   let y = height / 2;\r\n  //   let radius = 50;\r\n  //   let slices = d3.pie().value(1);\r\n\r\n  //   let arc = d3\r\n  //     .arc()\r\n  //     .outerRadius(radius)\r\n  //     .innerRadius(0);\r\n\r\n  //   function getXattribute(d) {\r\n  //     let a = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;\r\n  //     d.cx = Math.cos(a) * (radius - 10);\r\n  //     return (d.x = Math.cos(a) * (radius + 30));\r\n  //   }\r\n\r\n  //   function getYattribute(d) {\r\n  //     let a = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;\r\n  //     d.cy = Math.sin(a) * (radius - 10);\r\n  //     return (d.y = Math.sin(a) * (radius + 30));\r\n  //   }\r\n\r\n  //   let legend = slices.map(s => {\r\n  //     return (\r\n  //       <>\r\n  //         <g className=\"slices\">\r\n  //           <path className=\"slice\" stroke=\"#000\" d={arc} fill=\"#d3d3d3\" />\r\n  //         </g>\r\n  //         <g className=\"prefix__labels\">\r\n  //           <text\r\n  //             dy=\".35em\"\r\n  //             x={getXattribute(s)}\r\n  //             y={getYattribute(s)}\r\n  //             fontSize=\".75em\"\r\n  //             textAnchor=\"middle\"\r\n  //             transform={`translate(${width / 2} ${height / 3})`}\r\n  //           >\r\n  //             {s.data}\r\n  //           </text>\r\n  //           <path\r\n  //             className=\"prefix__pointer\"\r\n  //             d=\"M250.108 48.431h-87.079l15.255 23.285M247.162 161.569h-81.187l12.31-33.285M66.736 161.569h53.39l1.59-33.285M132.853 48.431H54.01l67.706 23.285\"\r\n  //             fill=\"none\"\r\n  //             stroke=\"#000\"\r\n  //           />\r\n  //         </g>\r\n  //         <g className=\"prefix__gradient\">\r\n  //           <path className=\"prefix__filled\" d=\"M100 200h100v15H100z\" />\r\n  //           <g\r\n  //             className=\"prefix__y prefix__axis\"\r\n  //             fill=\"none\"\r\n  //             fontSize={10}\r\n  //             fontFamily=\"sans-serif\"\r\n  //             textAnchor=\"middle\"\r\n  //           >\r\n  //             <path\r\n  //               className=\"prefix__domain\"\r\n  //               stroke=\"currentColor\"\r\n  //               d=\"M100.5 221v-5.5h100v5.5\"\r\n  //             />\r\n  //             <g className=\"prefix__tick\">\r\n  //               <path stroke=\"currentColor\" d=\"M100.5 215v6\" />\r\n  //               <text\r\n  //                 fill=\"currentColor\"\r\n  //                 y={9}\r\n  //                 dy=\".71em\"\r\n  //                 transform=\"translate(100.5 215)\"\r\n  //               >\r\n  //                 {'0.0'}\r\n  //               </text>\r\n  //             </g>\r\n  //           </g>\r\n  //           <text y={s.data} dy=\".35em\" transform=\"translate(65 205)\">\r\n  //             {'pValue'}\r\n  //           </text>\r\n  //         </g>\r\n  //       </>\r\n  //     );\r\n  //   });\r\n\r\n  //   return (\r\n  //     <svg viewBox=\"0 0 300 250\" preserveAspectRatio=\"xMinYMin meet\">\r\n  //       {legend}\r\n  //       <defs>\r\n  //         <linearGradient id=\"prefix__mainGradient\">\r\n  //           <stop offset={0} stopColor=\"red\" />\r\n  //           <stop offset={0.5} stopColor=\"#fff\" />\r\n  //           <stop offset={1} stopColor=\"#00f\" />\r\n  //         </linearGradient>\r\n  //       </defs>\r\n  //     </svg>\r\n  //   );\r\n  // };\r\n\r\n  backToTable = () => {\r\n    this.setState({\r\n      isTestDataLoaded: false,\r\n      isTestSelected: false,\r\n      enrichmentNameLoaded: false,\r\n      SVGPlotLoaded: false,\r\n      SVGPlotLoading: false,\r\n      imageInfo: {\r\n        key: null,\r\n        title: '',\r\n        svg: [],\r\n        dataItem: [],\r\n      },\r\n    });\r\n    this.handleSearchCriteriaChangeEnrichment(\r\n      {\r\n        enrichmentStudy: this.props.enrichmentStudy || '',\r\n        enrichmentModel: this.props.enrichmentModel || '',\r\n        enrichmentAnnotation: this.props.enrichmentAnnotation || '',\r\n        enrichmentTestAndDescription: '',\r\n      },\r\n      false,\r\n    );\r\n    this.handleLegendClose();\r\n  };\r\n\r\n  testSelectedTransition = bool => {\r\n    this.setState({\r\n      isTestSelected: bool,\r\n    });\r\n  };\r\n\r\n  informItemsPerPage = items => {\r\n    this.setState({\r\n      itemsPerPageInformedEnrichmentMain: items,\r\n    });\r\n  };\r\n  // cannot use this unless we can prevent first column (featureID) from being reordered\r\n  // columnReorder = columns => {\r\n  //   this.setState({ enrichmentColumns: columns });\r\n  //   const columnsArr = columns.map(e => {\r\n  //     return e.title;\r\n  //   });\r\n  //   const uDataRelevantFields = _.filter(columnsArr, function(key) {\r\n  //     return key !== 'description' && key !== 'Annotation';\r\n  //   });\r\n  //   // multiset svg rebuilds based on uData...if there are no results we need to override this from being passed down\r\n  //   if (uDataRelevantFields.length !== 0) {\r\n  //     this.setState({\r\n  //       uData: uDataRelevantFields,\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  handleTableNetworkTabChange = (e, { activeIndex }) => {\r\n    sessionStorage.setItem(`enrichmentViewTab`, activeIndex);\r\n    this.setState({ activeIndexEnrichmentView: activeIndex });\r\n    if (activeIndex === 1) {\r\n      this.handleLegendOpen();\r\n    }\r\n  };\r\n\r\n  getMessage = () => {\r\n    const {\r\n      enrichmentStudy,\r\n      enrichmentModel,\r\n      enrichmentAnnotation,\r\n    } = this.props;\r\n    if (enrichmentStudy === '') {\r\n      return 'study';\r\n    } else if (enrichmentModel === '') {\r\n      return 'model';\r\n    } else if (enrichmentAnnotation === '') {\r\n      return 'database';\r\n    } else return '';\r\n  };\r\n\r\n  getView = () => {\r\n    const message = this.getMessage();\r\n    if (this.state.isTestSelected && !this.state.isTestDataLoaded) {\r\n      return (\r\n        <div className=\"SearchingAltDiv\">\r\n          <SearchingAlt />\r\n        </div>\r\n      );\r\n    } else if (this.state.isSearchingEnrichment) {\r\n      return <TransitionActive />;\r\n    } else if (this.state.isTestSelected && this.state.isTestDataLoaded) {\r\n      return (\r\n        <div>\r\n          <SplitPanesContainer\r\n            {...this.props}\r\n            {...this.state}\r\n            onBackToTable={this.backToTable}\r\n            onHandleProteinSelected={this.handleProteinSelected}\r\n            onHandleHighlightedLineReset={this.handleHighlightedLineReset}\r\n            onHandleBarcodeChanges={this.handleBarcodeChanges}\r\n            // onHandleFilteredDifferentialFeatureIdKey={\r\n            //   this.handleFilteredDifferentialFeatureIdKey\r\n            // }\r\n          ></SplitPanesContainer>\r\n        </div>\r\n      );\r\n    } else if (\r\n      this.state.isValidSearchEnrichment &&\r\n      !this.state.isSearchingEnrichment\r\n    ) {\r\n      const TableAndNetworkPanes = this.getTableAndNetworkPanes();\r\n      return (\r\n        <Tab\r\n          className=\"TableAndNetworkContainer\"\r\n          onTabChange={this.handleTableNetworkTabChange}\r\n          panes={TableAndNetworkPanes}\r\n          activeIndex={this.state.activeIndexEnrichmentView}\r\n          renderActiveOnly={false}\r\n          menu={{\r\n            attached: true,\r\n            className: 'TableAndNetworkMenuContainer',\r\n            // tabular: false\r\n            // stackable: true,\r\n            // secondary: true,\r\n            // pointing: true,\r\n            // color: 'orange',\r\n            // inverted: true,\r\n          }}\r\n        />\r\n      );\r\n    } else return <TransitionStill stillMessage={message} />;\r\n  };\r\n\r\n  // informItemsPerPageEnrichmentTable = items => {\r\n  //   this.setState({\r\n  //     itemsPerPageEnrichmentTable: items,\r\n  //   });\r\n  //   localStorage.setItem('itemsPerPageEnrichmentTable', items);\r\n  // };\r\n\r\n  getTableAndNetworkPanes = () => {\r\n    const {\r\n      tab,\r\n      enrichmentStudy,\r\n      enrichmentModel,\r\n      enrichmentAnnotation,\r\n    } = this.props;\r\n    const {\r\n      enrichmentResults,\r\n      enrichmentColumns,\r\n      additionalTemplateInfoEnrichmentTable,\r\n      itemsPerPageEnrichmentTable,\r\n      multisetQueriedEnrichment,\r\n      activeIndexEnrichmentView,\r\n      isEnrichmentTableLoading,\r\n      networkDataError,\r\n    } = this.state;\r\n    let enrichmentCacheKey = `${enrichmentStudy}-${enrichmentModel}-${enrichmentAnnotation}-${multisetQueriedEnrichment}`;\r\n    const TableValuePopupStyle = {\r\n      backgroundColor: '2E2E2E',\r\n      borderBottom: '2px solid var(--color-primary)',\r\n      color: '#FFF',\r\n      padding: '1em',\r\n      maxWidth: '50vw',\r\n      fontSize: '13px',\r\n      wordBreak: 'break-all',\r\n    };\r\n    return [\r\n      {\r\n        menuItem: (\r\n          <Menu.Item\r\n            key=\"0\"\r\n            className=\"TableAndNetworkButtons TableButton\"\r\n            name=\"table\"\r\n            color=\"orange\"\r\n            // active={this.state.activeIndexEnrichmentView === 0}\r\n            inverted={(activeIndexEnrichmentView === 0).toString()}\r\n          >\r\n            {/* <Icon\r\n              name=\"table\"\r\n              size=\"large\"\r\n              color=\"orange\"\r\n              inverted={this.state.activeIndexEnrichmentView === 0}\r\n            /> */}\r\n            <img\r\n              src={\r\n                activeIndexEnrichmentView === 0 ? tableIconSelected : tableIcon\r\n              }\r\n              alt=\"Table Icon\"\r\n              id=\"TableButton\"\r\n            />\r\n          </Menu.Item>\r\n        ),\r\n        pane: (\r\n          <Tab.Pane\r\n            key=\"0\"\r\n            className=\"EnrichmentContentPane\"\r\n            id=\"EnrichmentContentPaneTable\"\r\n            // ref=\"EnrichmentContentPaneTable\"\r\n          >\r\n            <Grid>\r\n              <Grid.Row>\r\n                <div className=\"FloatRight AbsoluteExport\">\r\n                  <ButtonActions\r\n                    exportButtonSize={'small'}\r\n                    excelVisible={true}\r\n                    pngVisible={false}\r\n                    pdfVisible={false}\r\n                    svgVisible={false}\r\n                    txtVisible={true}\r\n                    refFwd={this.EnrichmentGridRef}\r\n                    tab={tab}\r\n                    study={enrichmentStudy}\r\n                    model={enrichmentModel}\r\n                    test={enrichmentAnnotation}\r\n                  />\r\n                </div>\r\n                <Grid.Column\r\n                  className=\"ResultsTableWrapper\"\r\n                  mobile={16}\r\n                  tablet={16}\r\n                  largeScreen={16}\r\n                  widescreen={16}\r\n                >\r\n                  <EZGrid\r\n                    ref={this.EnrichmentGridRef}\r\n                    uniqueCacheKey={enrichmentCacheKey}\r\n                    data={enrichmentResults}\r\n                    columnsConfig={enrichmentColumns}\r\n                    // totalRows={rows}\r\n                    // use \"rows\" for itemsPerPage if you want all results. For dev, keep it lower so rendering is faster\r\n                    itemsPerPage={itemsPerPageEnrichmentTable}\r\n                    // onInformItemsPerPage={\r\n                    //   this.informItemsPerPageEnrichmentTable\r\n                    // }\r\n                    loading={isEnrichmentTableLoading}\r\n                    // exportBaseName=\"Enrichment_Analysis\"\r\n                    // columnReorder={this.props.columnReorder}\r\n                    disableColumnReorder\r\n                    disableGrouping\r\n                    disableColumnVisibilityToggle\r\n                    min-height=\"75vh\"\r\n                    additionalTemplateInfo={\r\n                      additionalTemplateInfoEnrichmentTable\r\n                    }\r\n                    emptyMessage={CustomEmptyMessage}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Tab.Pane>\r\n        ),\r\n      },\r\n      {\r\n        menuItem: (\r\n          <Menu.Item\r\n            key=\"1\"\r\n            className=\"TableAndNetworkButtons NetworkButton\"\r\n            name=\"network\"\r\n            disabled={networkDataError}\r\n          >\r\n            {!networkDataError ? (\r\n              <img\r\n                src={\r\n                  activeIndexEnrichmentView === 1\r\n                    ? networkIconSelected\r\n                    : networkIcon\r\n                }\r\n                alt=\"Network Icon\"\r\n                id=\"NetworkButton\"\r\n              />\r\n            ) : (\r\n              <Popup\r\n                trigger={\r\n                  <img\r\n                    src={\r\n                      activeIndexEnrichmentView === 1\r\n                        ? networkIconSelected\r\n                        : networkIcon\r\n                    }\r\n                    alt=\"Network Icon\"\r\n                    id=\"NetworkButton\"\r\n                    className={!networkDataError ? '' : 'DisabledCursor'}\r\n                  />\r\n                }\r\n                style={TableValuePopupStyle}\r\n                className=\"TablePopupValue\"\r\n                content=\"Network Chart Not Available\"\r\n                inverted\r\n                basic\r\n              />\r\n            )}\r\n          </Menu.Item>\r\n        ),\r\n        pane: (\r\n          <Tab.Pane\r\n            key=\"1\"\r\n            className=\"EnrichmentContentPane\"\r\n            id=\"EnrichmentContentPane\"\r\n            // ref=\"EnrichmentContentPaneGraph\"\r\n          >\r\n            {!networkDataError ? (\r\n              <EnrichmentResultsGraph\r\n                {...this.props}\r\n                {...this.state}\r\n                onDisplayViolinPlot={this.displayViolinPlot}\r\n                onHandlePieClick={this.testSelected}\r\n                onHandleNodeCutoffInputChange={this.handleNodeCutoffInputChange}\r\n                onHandleNodeCutoffSliderChange={\r\n                  this.handleNodeCutoffSliderChange\r\n                }\r\n                onHandleLinkCutoffInputChange={this.handleLinkCutoffInputChange}\r\n                onHandleLinkCutoffSliderChange={\r\n                  this.handleLinkCutoffSliderChange\r\n                }\r\n                onHandleLinkTypeInputChange={this.handleLinkTypeInputChange}\r\n                onHandleLinkTypeSliderChange={this.handleLinkTypeSliderChange}\r\n                onHandleTotals={this.handleTotals}\r\n                onHandleLegendOpen={this.handleLegendOpen}\r\n                onHandleLegendClose={this.handleLegendClose}\r\n                onCreateLegend={this.createLegend}\r\n                onCancelGetEnrichmentsNetwork={\r\n                  this.handleCancelRequestGetEnrichmentsNetwork\r\n                }\r\n                onHandleNetworkGraphReady={this.handleNetworkGraphReady}\r\n              />\r\n            ) : (\r\n              <Message\r\n                className=\"NetworkGraphUnavailableMessage\"\r\n                icon=\"search\"\r\n                header=\"Network Graph Unavailable\"\r\n                content=\"Please Revise Search\"\r\n              />\r\n            )}\r\n          </Tab.Pane>\r\n        ),\r\n      },\r\n    ];\r\n  };\r\n\r\n  handleTotals = (filteredNodesLength, filteredLinksLength) => {\r\n    this.setState({\r\n      filteredNodesTotal: filteredNodesLength,\r\n      filteredLinksTotal: filteredLinksLength,\r\n    });\r\n  };\r\n\r\n  handleNodeCutoffInputChange = value => {\r\n    if (this.state.nodeCutoff !== value) {\r\n      this.setState({\r\n        nodeCutoff: value,\r\n      });\r\n      sessionStorage.setItem('nodeCutoff', value);\r\n    }\r\n  };\r\n\r\n  handleLinkCutoffInputChange = value => {\r\n    if (this.state.linkCutoff !== value) {\r\n      this.setState({\r\n        linkCutoff: value,\r\n      });\r\n      sessionStorage.setItem('linkCutoff', value);\r\n    }\r\n  };\r\n\r\n  handleLinkTypeInputChange = value => {\r\n    if (this.state.linkType !== value) {\r\n      this.setState({\r\n        linkType: value,\r\n      });\r\n      sessionStorage.setItem('linkType', value);\r\n    }\r\n  };\r\n\r\n  handleNodeCutoffSliderChange = value => {\r\n    if (this.state.nodeCutoff !== value) {\r\n      this.setState({ nodeCutoff: value });\r\n    }\r\n    sessionStorage.setItem('nodeCutoff', value);\r\n  };\r\n\r\n  handleLinkCutoffSliderChange = value => {\r\n    if (this.state.linkCutoff !== value) {\r\n      this.setState({ linkCutoff: value });\r\n    }\r\n    sessionStorage.setItem('linkCutoff', value);\r\n  };\r\n\r\n  handleLinkTypeSliderChange = value => {\r\n    if (this.state.linkType !== value) {\r\n      this.setState({ linkType: value });\r\n    }\r\n    sessionStorage.setItem('linkType', value);\r\n  };\r\n\r\n  // handleLegendOpen = () => {\r\n  //   // sessionStorage.setItem('legendOpen', 'true');\r\n  //   this.setState({ legendIsOpen: true });\r\n  //   // this.timeout = setTimeout(() => {\r\n  //   //   this.setState({ legendIsOpen: false });\r\n  //   // }, 2500);\r\n  // };\r\n\r\n  // handleLegendClose = () => {\r\n  //   // sessionStorage.setItem('legendOpen', 'false');\r\n  //   this.setState({ legendIsOpen: false });\r\n  //   // clearTimeout(this.timeout);\r\n  // };\r\n\r\n  render() {\r\n    const enrichmentView = this.getView();\r\n    const {\r\n      multisetPlotInfoEnrichment,\r\n      animationEnrichment,\r\n      directionEnrichment,\r\n      visibleEnrichment,\r\n    } = this.state;\r\n    const {\r\n      tab,\r\n      enrichmentStudy,\r\n      enrichmentModel,\r\n      enrichmentAnnotation,\r\n    } = this.props;\r\n    const VerticalSidebar = ({ animation, visible, direction }) => (\r\n      <Sidebar\r\n        as={'div'}\r\n        animation={animation}\r\n        direction={direction}\r\n        icon=\"labeled\"\r\n        vertical=\"true\"\r\n        visible={visible}\r\n        width=\"very wide\"\r\n        className=\"VerticalSidebarPlot\"\r\n      >\r\n        <Grid className=\"\">\r\n          <Grid.Row className=\"ActionsRow\">\r\n            <Grid.Column\r\n              mobile={16}\r\n              tablet={16}\r\n              largeScreen={16}\r\n              widescreen={16}\r\n            >\r\n              <ButtonActions\r\n                exportButtonSize={'small'}\r\n                excelVisible={false}\r\n                pngVisible={true}\r\n                pdfVisible={false}\r\n                svgVisible={true}\r\n                txtVisible={false}\r\n                plot={'enrichmentMultisetAnalysisSVG'}\r\n                tab={tab}\r\n                study={enrichmentStudy}\r\n                model={enrichmentModel}\r\n                test={enrichmentAnnotation}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n        <div\r\n          className=\"MultisetSvgOuter\"\r\n          dangerouslySetInnerHTML={{ __html: multisetPlotInfoEnrichment.svg }}\r\n        ></div>\r\n      </Sidebar>\r\n    );\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Row className=\"EnrichmentContainer\">\r\n          <Grid.Column\r\n            className=\"SidebarContainer\"\r\n            mobile={16}\r\n            tablet={16}\r\n            largeScreen={4}\r\n            widescreen={4}\r\n          >\r\n            <EnrichmentSearchCriteria\r\n              {...this.state}\r\n              {...this.props}\r\n              onSearchTransitionEnrichment={\r\n                this.handleSearchTransitionEnrichment\r\n              }\r\n              onEnrichmentSearch={this.handleEnrichmentSearch}\r\n              onColumnReorder={this.handleColumnReorder}\r\n              onSearchCriteriaChangeEnrichment={\r\n                this.handleSearchCriteriaChangeEnrichment\r\n              }\r\n              onSearchCriteriaResetEnrichment={\r\n                this.handleSearchCriteriaResetEnrichment\r\n              }\r\n              onDisablePlotEnrichment={this.disablePlotEnrichment}\r\n              onGetMultisetPlotEnrichment={this.handleMultisetPlot}\r\n              onMultisetQueriedEnrichment={this.handleMultisetQueriedEnrichment}\r\n              onHandlePlotAnimationEnrichment={\r\n                this.handlePlotAnimationEnrichment\r\n              }\r\n              onHandlePlotTypesEnrichment={this.handlePlotTypesEnrichment}\r\n              onSetStudyModelAnnotationMetadata={\r\n                this.setStudyModelAnnotationMetadata\r\n              }\r\n              onSetAnnotationsMetadata={this.setAnnotationsMetadata}\r\n              onHandleNetworkSigValue={this.handleNetworkSigValue}\r\n              onHandleNetworkOperator={this.handleNetworkOperator}\r\n              onHandleNetworkTests={this.handleNetworkTests}\r\n              onMultisetTestsFiltered={this.handleMultisetTestsFiltered}\r\n              onAnnotationChange={this.handleAnnotationChange}\r\n              onHandleNetworkGraphReady={this.handleNetworkGraphReady}\r\n              onHandleEnrichmentTableLoading={this.handleEnrichmentTableLoading}\r\n              onHandleHasBarcodeData={this.handleHasBarcodeData}\r\n              onGetEnrichmentsLinkouts={this.getEnrichmentsLinkouts}\r\n              onHandleIsDataStreamingEnrichmentsTable={\r\n                this.handleIsDataStreamingEnrichmentsTable\r\n              }\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column\r\n            className=\"EnrichmentContentContainer\"\r\n            mobile={16}\r\n            tablet={16}\r\n            largeScreen={12}\r\n            widescreen={12}\r\n          >\r\n            <Sidebar.Pushable as={'span'}>\r\n              <VerticalSidebar\r\n                animation={animationEnrichment}\r\n                direction={directionEnrichment}\r\n                visible={visibleEnrichment}\r\n              />\r\n              <Sidebar.Pusher>\r\n                <div\r\n                  className=\"EnrichmentViewContainer\"\r\n                  ref={this.EnrichmentViewContainerRef}\r\n                >\r\n                  {enrichmentView}\r\n                </div>\r\n              </Sidebar.Pusher>\r\n            </Sidebar.Pushable>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Enrichment);\r\n\r\nfunction getDataItemDescription(value) {\r\n  if (value) {\r\n    // const dataItem = value.split(':')[1];\r\n    // we need everything after the first : (e.g. Home sapiens: Apotosis)\r\n    const dataItem = value.substr(value.indexOf(':') + 1);\r\n    return dataItem;\r\n  }\r\n}\r\n\r\nfunction getTestName(value) {\r\n  if (value) {\r\n    const test = value.split(':')[0];\r\n    return test;\r\n  }\r\n}\r\n","C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\index.js",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\UrlControl.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\Differential.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionStill.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Transitions\\TransitionActive.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialSearchCriteria.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Shared\\SVGPlot.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcanoPlot.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentSearchCriteria.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\EnrichmentBreadcrumbs.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Differential\\DifferentialVolcano.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\FilteredDifferentialTable.jsx",[],"C:\\Dev\\OmicNavigator\\OmicNavigator\\src\\components\\Enrichment\\ViolinPlot.jsx",["65","66"],{"ruleId":"67","severity":1,"message":"68","line":39,"column":7,"nodeType":"69","messageId":"70","endLine":39,"endColumn":33},{"ruleId":"67","severity":1,"message":"71","line":40,"column":17,"nodeType":"69","messageId":"70","endLine":40,"endColumn":36},{"ruleId":"67","severity":1,"message":"72","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":14},{"ruleId":"67","severity":1,"message":"73","line":3,"column":16,"nodeType":"69","messageId":"70","endLine":3,"endColumn":21},"no-unused-vars","'fetchUrlEnrichmentsNetwork' is assigned a value but never used.","Identifier","unusedVar","'streamAsyncIterable' is defined but never used.","'Icon' is defined but never used.","'Popup' is defined but never used."]